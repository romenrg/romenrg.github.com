<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Management | Blog @romenrg]]></title>
  <link href="https://www.romenrg.com/blog/categories/management/atom.xml" rel="self"/>
  <link href="https://www.romenrg.com/"/>
  <updated>2025-01-18T15:07:01+00:00</updated>
  <id>https://www.romenrg.com/</id>
  <author>
    <name><![CDATA[Romén Rodríguez-Gil]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Software Engineers' Productivity: Beyond Misleading Metrics]]></title>
    <link href="https://www.romenrg.com/blog/2024/12/31/on-software-engineers-productivity-beyond-misleading-metrics/"/>
    <updated>2024-12-31T20:35:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2024/12/31/on-software-engineers-productivity-beyond-misleading-metrics</id>
    <content type="html"><![CDATA[<p>The question of how to measure software developers' productivity has long been a subject of debate in the tech industry. New versions of old misguided approaches, such as counting the "number of lines of code" written, resurface, over and over again, despite not reflecting value creation or performace.</p>

<p><img src="https://www.romenrg.com/images/measuring-software-engineers-productivity.jpeg" alt="An image of the home office of a remote worker, where his mac laptop screen displays a Zoom meeting" /></p>

<p>In fact, setting incentives based on such metrics can lead to counterproductive behaviors, as explored in "Reinventing Organizations" by Frederic Laloux. The book highlights how traditional incentive systems often undermine intrinsic motivation and foster a culture of gaming the system rather than pursuing genuine excellence.</p>

<!-- More -->


<h2>The Pitfalls of Misleading Metrics</h2>

<h3>Number of Lines of Code</h3>

<p>The "number of lines of code" metric (LOC) is perhaps the most infamous example of a misleading measure. While intuitively appealing due to its simplicity, it fails to account for the true purpose of software development: solving problems efficiently and effectively. In fact, fewer lines of well-crafted, maintainable code are often more valuable than sprawling, complex implementations.</p>

<p>Consider the case of IBM in the 1980s, where developers were incentivized to write more code. The unintended consequence was a proliferation of verbose, redundant code that increased maintenance costs and slowed progress (from the documentary “Triumph of the Nerds”). Similarly, in 1982 in Apple, some managers in the Lisa software team were asking engineers to weekly submit the number of codes they had written, to measure productivity. This finally stopped when <a href="https://en.wikipedia.org/wiki/Bill_Atkinson">Bill Atkinson</a>, arguably the most important Lisa implementer, famously reported “<a href="https://www.folklore.org/Negative_2000_Lines_Of_Code.html">-2000 lines</a>” the very same week he had made changes to an algorithm to make it 6x faster; thus highlighting the absurd nature of the LOC metric and its absolute disconnect with the actual impact of the work of engineers.</p>

<h3>Number of Commits</h3>

<p>Another misleading metric that has somewhat replaced LOC in the GitHub era is the "number of commits." While frequent commits can indicate progress, they do not inherently reflect the quality or significance of the work. A developer making small, incremental improvements adds value, but using this metric as a primary measure can incentivize meaningless, fragmented, or even broken commits later fixed in subsequent ones just to bump the metric. Similarly to the LOC metric, this approach may discourage thoughtful, cohesive, simpler and more readable changes that are better for the project in the long term.</p>

<h3>Bug Count as a Standalone Metric</h3>

<p>Another problematic metric is the number of bugs fixed. While fixing bugs is crucial, a focus solely on this metric can incentivize developers to neglect proactive measures like writing tests or addressing root causes of recurring issues. This approach risks significant business impact when unstable software reaches production. Worse, it can create perverse incentives. Developers may be tempted to introduce issues they later resolve, gaining recognition at the cost of overall product stability. The metaphor "rewarding firefighters creates a culture of arsonists" aptly describes how praising bug fixers can lead to these harmful behaviors.</p>

<h2>Designing Meaningful and Nuanced Metrics</h2>

<p>Apart from all the above, one of the most problematic aspects of the simple metrics described before is that they distort the real work of Software Engineers, who contribute to the success of a project in many ways beyond just writing code.</p>

<p>When designing metrics to assess the productivity of Software Engineers, we need to take into account several different aspects that reflect the diverse nature of their work, many of which are difficult to quantify:</p>

<h3>1. Long-Term Impact of Solutions</h3>

<p>Measure the durability and adaptability of solutions. A developer who designs a system that scales effortlessly with growing user demand or integrates seamlessly with future technologies has delivered significant value. Metrics like the stability of code over time, adaptability to new requirements, and low frequency of critical bugs highlight long-term impact. These metrics are not trivial to calculate, although some authors dig into them, for example in "Accelerate: The Science of Lean Software and DevOps" by Nicole Forsgren, Jez Humble, and Gene Kim.</p>

<h3>2. Total Cost of Ownership (TCO)</h3>

<p>Account for the ongoing costs associated with a piece of software, including maintenance, infrastructure usage, and the complexity it adds to the codebase. Developers who minimize TCO by writing efficient, modular, and well-documented code provide substantial value. This is partly reflected in Martin Fowler’s “<a href="https://martinfowler.com/articles/is-quality-worth-cost.html">Is High Quality Software Worth the Cost?</a>".</p>

<h3>3. Collaboration and Mentorship</h3>

<p>Effective software development is a team effort. The more senior engineers are, the more we must recognize their contributions to:</p>

<ul>
<li>Mentoring junior developers.</li>
<li>Conducting code reviews.</li>
<li>Improving team processes.</li>
</ul>


<p>These activities foster knowledge transfer and elevate the entire team’s productivity.</p>

<h3>4. Explore Customer-Centric Metrics</h3>

<p>Focus on the outcomes for end-users. Metrics like customer satisfaction (e.g. via Net Promoter Scores or feedback surveys), time-to-market for critical features, and user retention rates often indirectly reflect the real-world impact of developers’ work.</p>

<h3>5. Quality Assurance Contributions</h3>

<p>Value efforts in ensuring robust, maintainable software, such as:</p>

<ul>
<li>Writing automated tests.</li>
<li>Implementing CI/CD pipelines.</li>
<li>Advocating for best practices.</li>
<li>Crafting readable and easily maintainable code.</li>
</ul>


<h3>6. Innovation and Creativity</h3>

<p>Encourage developers to experiment and innovate by valuing the outputs of the implementation of new ideas or technologies. Innovation can manifest in improved algorithms, novel user experiences, or tools that enhance team productivity.</p>

<h3>7. Quality of Pull Request Reviews</h3>

<p>Pull Request (PR) reviews are a cornerstone of collaborative software development. However, the focus should be on the quality of these reviews rather than their quantity. High-quality reviews:</p>

<ul>
<li>Identify potential bugs and inefficiencies.</li>
<li>Suggest improvements for maintainability and readability.</li>
<li>Provide constructive feedback that helps team members grow.</li>
</ul>


<p>Defining quality in PR reviews is inherently complex, as it involves subjective elements like depth of analysis, clarity of communication, and alignment with project goals. A balanced approach considers both tangible outcomes (e.g., fewer post-merge defects) and team feedback on the helpfulness of reviews. For practical advice, see <a href="https://google.github.io/eng-practices/review/reviewer/">Google’s Guidelines on Code Reviews</a>.</p>

<h2>Trying to Define a Balanced System</h2>

<p>The key takeaway from the previous sections is to acknowledge <a href="https://martinfowler.com/articles/measuring-developer-productivity-humans.html">the importance of qualitative metrics</a> when assessing the performance of Software Engineers.</p>

<p>A holistic evaluation system should:</p>

<ul>
<li>Combine quantitative and qualitative metrics.</li>
<li>Involve peer and stakeholder feedback to capture less tangible contributions.</li>
<li>Avoid incentivizing counterproductive behaviors.</li>
</ul>


<p>For example, a balanced scorecard might include:</p>

<ul>
<li>Objective measures like feature cycle time and defect rates.</li>
<li>Subjective assessments of mentorship, team collaboration, and alignment with business goals.</li>
</ul>


<p>However, defining a formula to assess the performance of Software Engineers in a meaningful and holistic way is extremely hard.</p>

<h2>Do We Really Need Metrics?</h2>

<p>Since we have acknowledged the difficulty to measure developers productivity, an alternative approach is to not focus on it.</p>

<p>As highlighted in <em>Reinventing Organizations</em>, we might be better off in environments of trust and autonomy where developers are empowered to self-manage and align their work with the organization’s broader purpose.</p>

<p>This method removes the need for counterproductive incentives, enabling individuals and teams to focus on delivering meaningful results.</p>

<p>This approach requires more careful hiring practices, to ensure a team of motivated, capable individuals who can thrive in such environments.</p>

<p>Low performers can still be identified through peer feedback, repeated poor outcomes, or by patterns of behavior that conflict with team culture, norms and goals. Thus, accountability within the self-managing system can still be achieved.</p>

<h2>Conclusion</h2>

<p>There is a reasonable doubt about whether we can really measure developers’ productivity objectively; and also about whether we really need to do so, since measuring software developer productivity requires nuance and an appreciation of the multifaceted nature of their contributions.</p>

<p>Moving beyond superficial metrics like the number of lines of code (or the number of commits) and embracing more meaningful (though often subjective) indicators, organizations can foster a culture that values quality, collaboration, and long-term success. These more complex and nuanced approaches usually lead to better outcomes for users and businesses alike.</p>

<p>Alternative approaches to traditional incentives and measuring techniques involve creating environments of trust and autonomy where developers are empowered to self-manage and align their work with the organization’s broader purpose, removing the need for counterproductive incentives, and focusing on culture instead.</p>

<p>There is no silver bullet, but reimagining organizations to function as a “<em>Living System</em>” rather than a “<em>Machine</em>” offers a more natural fit for the complexity of today’s knowledge-driven, creative, and rapidly evolving digital landscape."</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2025, Jan 01</em>: Significant general revision; major improvements.</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Resilience: Overcoming Adversity and Finding Balance]]></title>
    <link href="https://www.romenrg.com/blog/2023/12/31/building-resilience-overcoming-adversity-and-finding-balance/"/>
    <updated>2023-12-31T16:57:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2023/12/31/building-resilience-overcoming-adversity-and-finding-balance</id>
    <content type="html"><![CDATA[<p>Resilience is the ability to bounce back from setbacks. It is definitely a critical skill to have, especially during difficult times; although it is often overlooked.</p>

<p><img src="https://www.romenrg.com/images/resilience-man-sunrise-nature.jpeg" alt="An image of a man, taken from behind, in nature, looking at sunrise" /></p>

<p>Personally, I have always considered myself quite resilient. However, 2023 has really made me prove it. And, to be honest, it has been a very challenging year. That is why I figured that writing about it would be the best idea for my end-of-year article.</p>

<!-- More -->


<p>When we face challenging situations in life, especially those that cause profound damage to our life pillars, our self-esteem and/or our mental health in general; it might be hard to find purpose, meaning and/or maintain a healthy lifestyle. Plus, for knowledge workers, it is especially hard to stay productive in such circumstances.</p>

<p>However, there are some tips that can be very useful to help us bounce back, building resilience and balance, in both personal life and work:</p>

<ol>
<li><p><strong>Prioritize self-care</strong>: Taking care of oneself is essential, especially during difficult times. Make sure you are getting enough sleep, eating healthy, and exercising regularly. You can also try meditation or other relaxation techniques to help manage stress. And I would highly encourage you to start one fun social activity, be it cooking lessons, acting classes or dance lessons; to meet new people and take a break from problems, while doing something new and fun.</p></li>
<li><p><strong>Set boundaries</strong>: It is important to set boundaries between your personal life and work. This can include setting specific work hours, turning off your phone or email after work hours, and taking breaks throughout the day. Also, you might need to take time off to take care of your mental health depending on the seriousness of the challenge. Think of it as if it was a serious physical injury. Wouldn’t you go on medical leave if that was the case? The support of your colleagues and manager are key as well. Be as open to them about your situation as you can, this will help them empathize and understand your situation.</p></li>
<li><p><strong>Build a support system</strong>: Having a strong support system can help you get through tough times. This can include friends, family, or even a therapist. Don’t be afraid to reach out for help when you need it. We, as humans, are social creatures; and no matter how self-sufficient you are, certain situations are too much for an individual to handle without support.</p></li>
<li><p><strong>Stay positive</strong>: It is important to stay positive and focus on the things that you can control. And let go of those that you cannot control. Try to find the silver lining in difficult situations and focus on the things that you are grateful for.</p></li>
<li><p><strong>Practice resilience</strong>: Resilience is a skill that can be developed over time. It is important to practice resilience during difficult times. This can include setting goals, staying focused, and taking small steps towards your goals every day. But don’t be too hard on yourself. It is ok to have bad days. However, in those days, don’t stop prioritizing self-care and the good habits you are building, including your social routines, which are critical in rebuilding your mental health.</p></li>
<li><p><strong>Find purpose</strong>: We all need a project in life, a long-term goal. Something to strive towards, which motivates us long term. Something that gives meaning to our life. Without a purpose, life can turn into a depressing, self-consuming void. Personally, my main purpose revolves around two little people, who bring profound meaning to my life. For them, I strive to be the best version of myself, willing to endure anything to care for them. Aday and Haridian, my son and daughter. Your father loves you both, with all my heart. And always will. This love is unconditional and unwavering.</p></li>
</ol>


<p>Well, I think the former 6 points are critical when trying to overcome difficult situations. Hope this article helps others as much as it helps myself.</p>

<p>In summary, it is okay to take time for yourself and prioritize your well-being. Building resilience and reconstructing your life during tough times takes time and effort, but it pays off when you are finally able to bounce back.</p>

<p>Remember, nurture and love yourself. Ultimately, you are your lifelong companion, the one constant presence that will surely be with you throughout your entire journey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It’s not remote work. Async work is the real paradigm shift]]></title>
    <link href="https://www.romenrg.com/blog/2022/12/31/its-not-remote-work-async-work-is-the-real-paradigm-shift/"/>
    <updated>2022-12-31T01:25:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2022/12/31/its-not-remote-work-async-work-is-the-real-paradigm-shift</id>
    <content type="html"><![CDATA[<p>The Covid pandemic forced many companies to unwillingly transition to remote work, thinking of it as a temporary necessity. However, at least in tech, remote work has become the new normal.</p>

<p><img src="https://www.romenrg.com/images/remote-async-work.jpeg" alt="An image of the home office of a remote worker, where his mac laptop screen displays a Zoom meeting" /></p>

<p>But… Is switching to remote work just a matter of working from home and using Zoom? Simply replacing the physical meeting room in the office with a virtual one? Or is it deeper than that?</p>

<!-- More -->


<p>Many first-timers working remotely fail to realize that the key paradigm shift which remote work enables is “async work”; beyond the distributed, “remote” aspect itself.</p>

<p>This means that not only working from the same office is not needed, but also, that we don’t even need to work at the same time (for the most part).</p>

<p>However, since this async bit is less obvious, we will dig further into it in this article.</p>

<h2>Overcoming physical limitations</h2>

<p>Of course, enabling remote work is a prerequisite to async work. And working remotely has some minimal requirements on its own, which are worth reviewing quickly first.</p>

<p>Those of us working in the digital realm have no physical constraints to our work, apart from the very minimal ones: table, chair, computer and internet connection. Beyond that, we only have the artificial constraints that some companies (or ourselves) impose, either consciously or unconsciously.</p>

<p>If you work in software development, or, really, in any other knowledge-intensive job that doesn’t require specific physical elements to it; you don’t have to work from a particular location. This has been the case for quite a few years now, but collectively we seemed to need a pandemic to fully realize.</p>

<h3>So, what do digital workers and companies really need?</h3>

<ul>
<li>Computers, meeting the hardware requirements of the work, including a webcam and a microphone.</li>
<li>A tool to chat, which should also allow grouping conversations in channels / topics and threads, to make them manageable.</li>
<li>A tool to meet, supporting both video and audio; and with the ability to record meetings.</li>
<li>A tool to organize and track work (to create to-do lists / backlogs; set status to items: pending, in progress, completed; etc.).</li>
<li>A tool to keep and share work-related knowledge.</li>
</ul>


<h3>Some useful enhancements</h3>

<ul>
<li>A good microphone, camera and headset, beyond the built-in ones in your computer:

<ul>
<li>Video and audio quality are very important for a successful remote communication. Especially audio when you have many non-native speakers in the team. But also video, since non-verbal cues are a key part of human communication.</li>
</ul>
</li>
<li>Enough screen real estate:

<ul>
<li>To me, screen real estate is never too much.</li>
<li>Personally, I have two 28” monitors that I use constantly (e.g. one with the chatting tool and another one with a browser; or one with a browser and another one with the IDE). I use big font sizes, as my sight is not my greatest strength. So having two large screens really helps me.

<ul>
<li>Also, I find my 2 big screens very useful for remote meetings. I can keep the general participants' view in one of my 28” screens (letting me see all, or most, faces); while also keeping another screen either for whoever is speaking at a certain point or, especially, for the shared screen of whoever is presenting.</li>
</ul>
</li>
<li>Additionally, I also keep my 16” mac screen on a side, for secondary things such as music (Spotify), for instance.

<ul>
<li>In meetings, I also benefit from having this third monitor, to keep our chatting tool (Slack) handy there; or a browser window, useful if I have to search for something while in the meeting.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>But, even though this minimal setup is important, some people focus too much (or solely) on tools, and often forget the essential (and more complex) process changes. These are really the key to make the most out of distributed, asynchronous team collaboration.</p>

<h3>So, what are the best practices to work effectively as a fully distributed, asynchronous team?</h3>

<p>Beyond the minimal setup described above, some of the key practices to really be effective as a fully distributed and asynchronous team include:</p>

<ul>
<li>Minimizing sync times, and planning meetings ahead. Letting people have time to organize. Also, being mindful of the best overlapping hours of the attendees (as they are likely to be distributed across multiple timezones).</li>
<li>Recording meetings by default, as they are a great source of documentation later on.</li>
<li>Moving to written and async communication by default:

<ul>
<li>Written communication forces us to think more about the ideas that we want to convey; and also to be more careful expressing them, since our words are going to remain there, readable for a long time, and often visible to many.</li>
<li>By using channels and threads properly, in our chatting tool, we can avoid unnecessary noise, while also creating a great searchable knowledge-base for all coworkers, automatically.</li>
</ul>
</li>
<li>Using digital-native tools to cover all aspects of work.

<ul>
<li>E.g. in Software Development:

<ul>
<li>Github, or an equivalent advanced application built on top of SCM tools:

<ul>
<li>These are also tightly linked to written communication; e.g. in the form of PRs and their reviews, where a lot of async collaboration happens organically.</li>
</ul>
</li>
<li>Jira + Confluence; Notion, or similar:

<ul>
<li>For a more formal organization of work, planning and documentation.</li>
</ul>
</li>
<li>Slack / Microsoft Teams / Email:

<ul>
<li>For direct, mostly async, communication; per teams, topics or 1:1s.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>What is the minimum number of synchronous meetings needed?</h3>

<p>Assuming you are an individual contributor (IC), a minimal set of synchronous meetings could be defined by:</p>

<ul>
<li>A planning session of 1-2 hours held once every 2 weeks (or whatever the duration of cycles that best suits your team is).</li>
<li>A 1-2 hours check-in meeting in the middle of every cycle.</li>
<li>A 1-2 hours review + retrospective session at the end of the cycle, one or two days before the new planning session.

<ul>
<li>Honest retrospectives are extremely valuable; especially if all team members feel free to speak their minds, and all are trying to collectively improve processes and align, constructively.</li>
</ul>
</li>
</ul>


<p>The previous list is really what I consider to be the minimal set of sync meetings necessary, but some useful additions could be made, such as:</p>

<ul>
<li>A 1-2 hours meeting, at some point during the cycle, used as a longer-term planning session, in which to refine upcoming work; to keep a “ready” backlog and thus ease upcoming cycle-planning sessions.</li>
<li>1:1s with your manager, every other week or once a month, for 30 mins. And maybe similar meetigns with some other key team members as well.</li>
<li>Some less frequent meetings such as:

<ul>
<li>Quarterly planning meetings.</li>
<li>Yearly planning meetings.</li>
<li>Some especial, focused meetings, that might be required when starting a new initiative / project.</li>
</ul>
</li>
</ul>


<p>Also, I am a big fan of open, transparent companies; and I’ve been lucky to work at both <a href="https://www.cloudbees.com/">CloudBees</a> and <a href="https://turo.com/">Turo</a> recently, which fit that category. In these cases, so-called “all-hands” meetings are held every other week (or every month), typically lasting less than 1 hour every time. And I find them extremely valuable, to align the whole org (e.g. engineering) and/or the whole company. But in these meetings, which are usually recorded, the average IC is most likely going to be a listener. So they don’t really qualify as a “sync meeting”; even though attending these sessions live has many benefits, including being able to participate (either commenting or asking questions).</p>

<p>So, summarizing: If we take a quick look at the list above, necessary sync time translates to a range that goes from 3 to 10 hours per week.</p>

<p>Assuming the regular 40-hour work week, that means that only between 7.5% to 25% of the time has to be synchronous; while 75% to 92.5% of our work time can be fully asynchronous.</p>

<h2>What about the social or human side of work?</h2>

<p>This is a key aspect to take into account. Working remotely and asynchronously doesn’t mean we become robots. Making the workplace more “human” and developing some social ties with coworkers doesn’t require being in an office setting; and it doesn’t even require working synchronously.</p>

<p>Having said that, spending some synchronous time in social events is definitely good, maybe just a couple of hours a month. And even seeing each other in real life one or two times per year is definitely very positive.</p>

<p>Let’s try to summarize my take on the social side of remote and async work.</p>

<h3>Include some remote-friendly social activities</h3>

<p>Some that I’ve been part of and consider valuable include:</p>

<ul>
<li>Social synchronous meetings, maybe 1-3 hours per month:

<ul>
<li>They should definitely be optional for team members, but I highly encourage everyone to participate.</li>
<li>You might also consider recording them, so that those that were not able to attend can watch the recording and feel integrated, keeping the social context of the team.</li>
<li>In our case, we currently have 2 remote-but-synchronous social activities per month (both optional):

<ul>
<li>One casual social meeting. In this one-hour meeting we can talk about anything other than work. We often bring 2 topics beforehand, as placeholders, but discussion can move away from those topics entirely. We have also had meetings in which we have formed teams to play online light games, such as <a href="https://www.geoguessr.com/">GeoGuessr</a>.</li>
<li>A two-hour <a href="https://codingdojo.org/">Coding Dojo</a> session, where a team member proposes and facilitates a code kata (or architectural kata) and we work together on solving it. We might break the group down into multiple ones depending on the number of attendees. At the end we share learnings, comments, suggestions, etc. This is applicable to us as an engineering team, but I’m sure other teams can find equivalent types of activities.</li>
</ul>
</li>
</ul>
</li>
<li>Social channels in your chatting tool about common interests:

<ul>
<li>E.g.: board-games, cooking, travel, series, you name it…</li>
</ul>
</li>
<li>Have regular, short 1:1s with your different teammates; just to chat a bit and discuss things other than work, to keep a human connection. Even spending half an hour per month on an individual call with each of your closer teammates can already make a big (although subtle) difference in the daily work.

<ul>
<li>In a remote setting, most of the casual conversations that often happen in an office are lost, so forcing them a bit via 1:1s helps compensate for the loss, and lets us build human relationships with our colleagues.</li>
</ul>
</li>
</ul>


<h3>Spending some in-person time periodically is a good idea</h3>

<p>In my last two companies I’ve been working fully remote, and in both cases we have usually had at least 2 opportunities per year to meet face-to-face. In my experience, those events tend to be very energizing, and make me feel much more connected to both my peers and the business. I always come back home highly motivated.</p>

<p>So, meeting for a week or two, every six months or so, even though it is not really essential, I would say is highly recommended. Or at least once a year, to keep the human connection with colleagues. These in-person events can range from simply spending some time working next to each other, to having a company-wide event with talks from different areas. The latter has the additional benefit of breaking silos, letting us learn more about other teams and meet people we don’t often work with. Plus, spending some company-wide, in-person social time, is a great way to devirtualize (and humanize) people with whom we may have chatted (or even met in a virtual call), but who we have never seen in real life.</p>

<h2>The benefits of distributed and async work</h2>

<p>Ok, so far we have covered the needs remote teams have. We have also discussed the minimal time needed in synchronous calls. And we have gone through some tips on how to promote a healthy remote and async work environment.</p>

<p>But, why would we want to do all this? Are there any real benefits to it?</p>

<h3>A productivity booster</h3>

<p>Interruptions are a real productivity killer. I’ve suffered this in the past, working from an office setting. There is often the classic coworker that comes to your desk to ask a not-that-important question, every now and then; interrupting your flow (which maybe took an hour to get going), and now causing you to put extra effort, for the next 20 minutes, trying hard to get back to where you were.</p>

<p>And since there are many of such interruptions during a work day, several hours per day are wasted daily in offices, on average, due to interruptions. With the cost it has both directly (wasted time) and indirectly (negative effect on morale and, as with any other distraction, increased mistakes).</p>

<p>In contrast, by switching those questions to whatever chatting tool you use remotely, they become asynchronous, so you can keep your focus and then reply whenever you finish what you were doing (or whenever you voluntarily decide to switch focus).</p>

<p>If you want to learn more about the cost of interruptions, you can <a href="https://www.nexalearning.com/blog/bid/50317/6-startling-statistics-about-interruptions-at-work">read some articles</a> on it, including <a href="https://www.ics.uci.edu/~gmark/chi08-mark.pdf">scientific research</a>. Interruptions are definitely a big deal.</p>

<p>Another productivity-related benefit of remote and async work is that it forces us to schedule meetings beforehand. This typically leads to time optimization, preparing an agenda and agreeing on the need for the meeting to be held; avoiding unnecessary meetings and spending the minimal time required in the call, with the minimal number of people necessary.</p>

<p>Also, when meetings are recorded, people can decide to skip them if they don’t feel their presence is needed; and can always watch the recording if they feel something relevant was discussed. Recording also allows viewers to skip sections of the meetings that are not relevant to them, or play them at a faster speed, while maybe doing something else (especially when the meeting is not critically important and they only want to have an idea of what was discussed). This also leads to saving time, and being more efficient at work.</p>

<h3>Access to a wider talent pool</h3>

<p>This one is rather obvious. If you are hiring people that will need to go to your office every day, you are limited to people that live in your area and are willing to commute to the office daily (or most days). And / or to some people that might be willing to relocate.</p>

<p>When you switch to remote work, though, you expand significantly. At least to people that work in similar time zones but are far enough to not be able to commute, or people that, for different reasons, have issues getting to the office (not having a car, avoiding traffic jams, etc.). However, if you require synchronous presence of team members despite being remote, you are still imposing a big restriction on your candidates pool.</p>

<p>But when you go one step further, from remote to async work, then you can expand anywhere, despite having almost-incompatible timezones (provided the minimal sync time can be arranged). This switch lets you access the global talent pool almost without restrictions.</p>

<h3>Real flexibility to separate or blend life and work</h3>

<p>As a parent, I really value the flexibility that remote and async work brings to me. I can arrange my work day so that I can take my kids to school / day care, and/or pick them up; working in between. I can also have a quick walk with them in the afternoon while there is still sun; and then I can work a bit when they are asleep and it is quiet at home.</p>

<p>Your preferences might vary, and you might prefer to have a clear separation between your work and personal time. But the key here is that remote and async work lets you decide how you organize your professional self in the way that best fits your life.</p>

<h2>Some interesting resources</h2>

<p>Of course I’m not the first person to write about this, by any means. I’m simply sharing my experiences and views on this, to me, important topic.</p>

<p>Having said that, you might find other experiences and views useful. So I’m adding below some related articles, from relevant voices:</p>

<ul>
<li><a href="https://buffer.com/resources/asynchronous-communication/">Asynchronous Communication and Why It Matters For Remote Work, from Buffer</a></li>
<li><a href="https://about.gitlab.com/company/culture/all-remote/asynchronous/">How to embrace asynchronous communication for remote work, by GitLab</a></li>
<li><a href="https://lattice.com/library/what-is-asynchronous-work-heres-everything-you-need-to-know-to-implement-it-at-your-organization">What Is Asynchronous Work? Here’s Everything You Need to Know to Implement It at Your Organization, from Lattice</a></li>
<li><a href="https://twitter.com/shl/status/1222545212477599751">A Twitter thread by Sahil Lavingia, on Gumroad’s transition to fully asynchronous work</a></li>
<li><a href="https://remote.com/blog/why-you-should-be-doing-async-work">One article on “Why you should be working asynchronously in 2022”, from remote.com</a></li>
</ul>


<h2>Convinced?</h2>

<p>Did I manage to convince you? Or not at all?
Or were you already convinced?</p>

<p>What has your experience been with remote and async work so far?</p>

<p>I’ve probably missed some relevant points; and you might have encountered challenges that I’ve failed to mention (and which might be interesting to discuss). You may also have discovered better socializing approaches in these remote and async settings, or you might know about other tools/tips/processes that ease the transition for more traditional companies.</p>

<p>So, please, join the conversation in the comments and let’s keep discussing this interesting topic, remotely and asynchronously!</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2023, Jan 02</em>: Some general style improvements.</p>
  <p><em>2022, Dec 31</em>: First version published.</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Projects vs Software Products]]></title>
    <link href="https://www.romenrg.com/blog/2020/12/30/software-projects-vs-software-products/"/>
    <updated>2020-12-30T13:26:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2020/12/30/software-projects-vs-software-products</id>
    <content type="html"><![CDATA[<p>As a developer, you work on software projects, right? ...Or are they <em>software products</em>?</p>

<p>Like many others in the software industry, you might think those two concepts are synonyms; but they aren’t. In fact, whether the software being developed is considered a project or a product may have critical and non-trivial ramifications, in many aspects.</p>

<p><img src="https://www.romenrg.com/images/products_vs_projects.jpg" alt="Team meeting in which multiple colleagues discuss in a table, where several computres are opened. One man moves hands displaying confusion" /></p>

<p>The <em>not-so-subtle</em> differences between software projects and software products actually have a huge impact on our behavior, both from a business as well as from an engineering perspective.</p>

<!-- More -->


<p>For many years I’ve been trying to find the time to write about this key difference, to which many people in tech fail to give importance to. About a year ago, I had the opportunity to give a <a href="https://www2.slideshare.net/romenrg/agile-software-development-beyond-projects-ull">lecture</a> on this very topic. And now, I have finally decided to write about this important topic in more detail.</p>

<p>I'll start with definitions, digging into the key differences that derive from them. Afterwards, I'll explore the critical behavioral ramifications. However, if you just want a quick summary, feel free to jump directly to the <a href="#detailed-comparison">comparison table</a>.</p>

<h2>Let’s start with some definitions</h2>

<p>If we want to get a clear definition of "project" and “<a href="https://www.pmi.org/about/learn-about-pmi/what-is-project-management">project management</a>", the Project Management Institute (PMI) can probably be of some help. From their site we can extract two clear sentences that are relevant in this context:</p>

<ul>
<li>A <strong>project</strong> is temporary in that it has a defined beginning and end in time, and therefore defined scope and resources.</li>
<li><strong>Project management</strong>, then, is the application of knowledge, skills, tools, and techniques to project activities to meet the project requirements.</li>
</ul>


<p>Now, if we try to look for definitions of “<a href="https://en.wikipedia.org/wiki/Product_(business)">product</a>” and “<a href="https://en.wikipedia.org/wiki/Product_management">product management</a>”, we can probably summarize them as:</p>

<ul>
<li>A <strong>product</strong> is an object or system made available for consumer use; it is anything that can be offered to a market to satisfy the desire or need of a customer.</li>
<li><strong>Product management</strong>, then, drives the business case for product development and has an active role throughout its development, test and launch; being also involved in product change and lifecycle decisions and planning.</li>
</ul>


<p>Can you tell the key differences already?</p>

<h2>Digging into the differences</h2>

<h3>Two key differences, from definitions</h3>

<p>From the definitions above, we can clearly see the first big difference: the temporary nature of a project. <strong>Projects are time-constrained efforts</strong>, supposed to have a defined beginning and end date. This clearly-defined temporary nature does not apply to products, which don’t have such predefined beginning and end in time, being subject to market demand instead.</p>

<p>Moreover, those clearly defined time boundaries for projects also bring the second clear distinction: fixed scope and resources (i.e. the project requirements). This doesn’t apply to products either. <strong>Products are evolving creatures by nature</strong>. While project management cares about meeting those predefined project requirements; product management cares about the business case for the product, constantly learning from users and having an active role in the product lifecycle, defining new features and/or re-prioritizing work, adapting to market needs.</p>

<h3><a id="detailed-comparison"></a>Detailed comparison</h3>

<p>When I was preparing my lecture, I found a very nice article by Sriram Narayan in Martin Fowler’s blog. In his article, Sriram added a very comprehensive <a href="https://martinfowler.com/articles/products-over-projects.html#WhatIsProduct-mode">table comparing project-mode and product-mode</a>.</p>

<p>For this article, I have created my own simplified table; focusing only on some key aspects I would like to compare for the two cases.</p>

<table>
<thead>
<tr>
<th>Aspect                                  </th>
<th> Project                                   </th>
<th> Product                                                    </th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Duration</em>                              </td>
<td> Fixed. Limited (e.g. <em>X</em> months).           </td>
<td> Unknown. Depending on market (from <em>X</em> weeks to <em>Y</em> decades).</td>
</tr>
<tr>
<td><em>Scope</em>                                 </td>
<td> Supposedly known and fixed.               </td>
<td> Unknown. Constant learning and adaptation is assumed.</td>
</tr>
<tr>
<td><em>Costs</em>                                 </td>
<td> Supposedly known and fixed.               </td>
<td> “Pay as we go”, i.e. weekly / monthly / yearly (e.g. salaries).</td>
</tr>
<tr>
<td><em>Technical quality</em>                     </td>
<td> Not rewarded; thus, not prioritized. Projects are seen as one-off efforts, so maintainability is not valued. </td>
<td> Critical. Product development is a continuum. Technical excellence is key to keep up the product’s iterative and incremental evolution.</td>
</tr>
<tr>
<td><em>Key mindset aspects</em>                   </td>
<td> Fixed mindset. “We know what we have to build”. So, “just do it”. Don’t question things. </td>
<td> Learning mindset. “We are constantly learning and adapting”. Data-driven. Question decisions constantly.</td>
</tr>
<tr>
<td><em>Key engineering skills</em>                </td>
<td> Framework-specific knowledge. <br/><br/> Everything is fixed, from features to technologies. "We just need to write the code as quickly as possible". </td>
<td> <a href="https://github.com/romenrg/evergreen-skills-developers">Evergreen development skills</a>. <br/><br/> Everything may change, from features to technology. "We need to learn and adapt constantly". "We apply technical best practices". "Teamwork, mentoring and collaboration are key".</td>
</tr>
</tbody>
</table>


<h2>Software development is mainly about building products</h2>

<p><a href="https://www.romenrg.com/blog/2015/09/28/why-asking-developers-for-time-estimates-in-software-projects-is-a-terrible-idea-and-how-to-bypass-it-with-scrum/#the-role-of-evil-contracts">Software development involves many unknowns</a>. Those unknowns make it extremely hard for us to have the certainties "projects" require upfront. At the beginning is when we know the least about the software what we are building.</p>

<h3>In the digital economy, software evolves constantly</h3>

<p>Think of the software you use in your daily life. Isn't it always evolving? You receive constant updates, not only for bugfixing; but also to add new features, <a href="https://www.romenrg.com/blog/2013/01/02/improving-the-ui-to-achieve-a-better-ux-my-experience-in-stat4you/">improve the UX</a>, or even to remove pieces that are no longer relevant.</p>

<p>Does this fit into the definition of "project" we saw before? Do these applications have “a defined beginning and end in time”? And how about scope and resources, do they seem to have been fixed upfront?</p>

<p>Change and evolution are natural in products, but not in projects. Projects don't welcome change. And software evolves constantly.</p>

<h3>Software products and outsourcing are not a good fit</h3>

<p>Traditionally, it has been common for non-software organizations to outsource software development initiatives. For instance, Government agencies typically outsource their “software development projects”, even though in most cases they should have been thinking in terms of software products instead.</p>

<p>Think of an e-gov application in which citizens can perform their bureaucratic obligations from home. Isn’t that a software product? It will have to evolve, as new laws are passed. And it is not supposed to have a predefined teardown day. Instead, we would probably expect it to be there for the long run. Over time, citizens (users) will discover bugs, which will have to be addressed; and we will likely complain about it and/or suggest improvements. There might also be scalability issues and/or outages that will have to be tackled.</p>

<p>Treating these software products as outsourced projects means that the owners will hire an external company to build it. Usually the cheapest. The project will have a fixed scope, and the parties will agree on a timeline and on a price. The external company will complete the project, according to those parameters and hand it over to the customer. Then, usually, the external company forgets about it. If changes are desired in the future, new projects will be defined and outsourced. Often to different companies.</p>

<p>In most cases, the company that is hired to build the software is not involved in the discovery process with potential users. They are not involved in the prioritization of features. They are just hired to do X, as quickly and cheaply as possible. And since they are not rewarded for software quality nor for asking questions, they will probably build it without maintenance in their minds. And they won’t question decisions nor worry about gathering data.</p>

<p>Now, think how different it would be if it was treated as a software product, with an in-house team building it and participating in all the process, from conception to evolution. The team would understand needs, motivations and strategic goals; they would be engaged. They would ask questions. Hypotheses could be defined together and data collection and learning would be in everybody’s mind since the beginning. Working in small increments would be easier. Writing maintainable code becomes crucial. Changes are welcome. And quality matters.</p>

<p>Being aware of the importance of software products in the digital economy means that, if your software is (or is becoming) the core of your business, then you keep software development in-house. Nowadays, every company is a software company. Think of Airbnb, Lyft or Netflix. These businesses could have opted to externalize software development, but they realized the software products they were building are the core of their business. They realized they were software companies.</p>

<h3>How about open source "projects"?</h3>

<p>It is common in the software industry to hear people refer to “open source projects”. In most cases, though, I would argue we should be talking about “open source products” instead.</p>

<p>I have been an open source software (OSS) user for many years, and I have also contributed to open source myself. One example of OSS to which I have contributed is <a href="http://jenkins.io/">Jenkins</a>. Jenkins is the leading open source automation server. It has been around for more than 15 years, with millions of installations worldwide. And it has evolved significantly, including the rename from Hudson, the recent UI changes, and the thousands of ever-evolving plugins, created by a thriving open source community. Based on this data and the previous definitions, should we consider Jenkins an “open source project” or, rather, an “open source product”?</p>

<p>I understand that, when somebody (like Kohsuke with Jenkins) starts to build an open source software, they might have a limited and well defined idea. And they may work on a “project” to make it happen. A project to build the first set of fixed features for their idea. But then, if it is successful, that initial project leads to a product that keeps evolving in unanticipated ways. Scope is no longer fixed, as the community starts to bring new ideas and prioritize their development; and there is no defined “end date”.</p>

<p>Successful open source "projects" are here to stay, for a long time. But their success will keep them evolving within their communities, as <em>software products</em>.</p>

<h2>My personal take</h2>

<p>As you may have guessed after reading this article, I’m a big fan of building software as products. I have built many in my career; and <a href="https://www.romenrg.com/blog/2015/03/17/10-plus-1-valuable-lessons-i-learned-from-my-failed-startup/">I’ve learned a lot</a> from those experiences.</p>

<p>But building software as products is not just what I enjoy the most. It is truly the way I believe we should be building software, to get the most out of it.</p>

<p>Software projects are dead. Long live <em>software products</em>.</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2021, Jan 10</em>: Improved introduction, incl. reference to comparison table, as a TL;DR resource.</p>
  <p><em>2020, Dec 30</em>: First version published.</p>
 </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everything 'as-code']]></title>
    <link href="https://www.romenrg.com/blog/2019/12/31/everything-as-code/"/>
    <updated>2019-12-31T20:14:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2019/12/31/everything-as-code</id>
    <content type="html"><![CDATA[<p>If you are in the software industry, and specially if you are in the DevOps space, you are probably familiar with the concepts of "Infrastructure as code" and "Configuration as code", which are very popular lately. But, what if that same idea could be applied to everything else in a software company? Aren't documentation and training great candidates for becoming "as-code" as well?</p>

<p><img src="https://www.romenrg.com/images/dwjw2019_lisbon_talk.jpg" alt="Picture taken during the presentation at DWJW 2019. I'm showing the tech stack of the new CloudBees' training platform" /></p>

<p>During 2019 I've been intensively working on this idea at <a href="https://standard.cbu.cloudbees.com/">CloudBees University</a>, along with my colleagues. Nowadays, for our training platform and courses everything is done "as code".</p>

<p>Sounds interesting? Keep reading to learn more about it and/or watch the <a href="https://www.romenrg.com/blog/2019/12/31/everything-as-code/#training-as-code-talk">"Training As Code" talk</a> my colleague Mark Waite and I delivered at DevOps World | Jenkins World in December 2019.</p>

<!-- More -->


<h2>Infrastructure and configuration as code</h2>

<p>Moving infrastructure definition and application configuration to code has been a huge step forward for us as an industry. It has allowed us to automate many "opearions" tasks, saving significant time, reducing human errors and allowing us to have a clear "state" of our software products, their infrastructure and configuration. And it has also contributed to bridge the gap between "development" and "operations", improving collaboration between these teams.</p>

<p>When it comes to tools and technologies, Terraform, Chef, Puppet, Salt, Ansible, Docker and Kubernetes, among others, have played a crucial role in this movement; enabling engineers to describe infrastrucutre and configuration as code.</p>

<h2>How about documentation?</h2>

<p>It's been a while since many technologies and tools have shifted their documentation to code. Many of the most popular open source tools are hosted in GitHub, and typically most of them contain at least a README file in the repo itself, often written in Markdown (but can also be written in alternative languages, such as <a href="http://asciidoc.org/">AsciiDoc</a>).</p>

<p>Also, blogging tools, like <a href="https://jekyllrb.com/">Jekyll</a>, have geared to this concept as well; using Markdown files to represent the different posts, that are later rendered into HTML.</p>

<p>And this trend is also accelerating. Nowadays I see many relevant projects and tools shifting their documentation sites to code. Among the benefits, not only does it allow us to treat everything that belongs (or relates to) a software product equally, but it also improves collaboration between teams. Engineers are much more likely to contribute to documentation if it is written as code, and specially if it is in the very same repo in which the code is. This shift is actually helping to break silos again, as it did between development and operations.</p>

<p>Moreover, having documentation as code makes it easier for us to include documentation-specific stages in our CI/CD pipelines, such as spelling checks or broken links validations.</p>

<h2>Combining these concepts in CloudBees University</h2>

<p>In CloudBees University we offer several courses, most of them focused on <a href="https://jenkins.io/">Jenkins</a> (targeting audiences with different level of knowledge in Jenkins administration or Jenkins pipelines). Those courses are highly technical and have significant "hands on" pieces. The content is displayed as a website, while for the hands on part, we provide students with lab environments in which they have the different tools they need for the course, with the specific configuration needed for the different exercises they have to complete.</p>

<h3>Everything "as code"</h3>

<p>Needless to say everything is done as code, from our content to the lab environments and their configuration.</p>

<p>Want to know more? Mark and I explained all the details in our talk at DevOps World | Jenkins World 2019, which we recorded and is available below.</p>

<h4 id="training-as-code-talk"> Training As Code: Applying CI & CD to Training Development</h4>




<iframe width="560" height="315" src="https://www.youtube.com/embed/1hda-bVYaVc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>As we said during the talk, we are still learning and improving, but it's been a great experience. This approach has allowed us to achieve things that wouldn't have been possible if we were relying on manual tasks. Now we have a single source of truth for everything in CloudBees University, we have peer-reviews for any change we make, clear versioning and history and, of course, fully automated <a href="https://www.romenrg.com/blog/2017/12/31/continuous-integration-delivery-deployment/">CI/CD</a> processes, for integrations and deployments.</p>

<p>Now, how about you? Are you doing "everything as code" already?</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2020, Oct 21</em>: Minor style improvements</p>
  <p><em>2020, Jan 12</em>: Minor fixes (typos) and addition of examples of docs-specific CI checks.</p>
  <p><em>2020, Jan 11</em>: Major rewrites to the article. First "public" version.</p>
  <p><em>2019, Dec 31</em>: Original draft.</p>
</div>



]]></content>
  </entry>
  
</feed>
