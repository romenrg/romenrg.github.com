<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Management | Blog @romenrg]]></title>
  <link href="https://www.romenrg.com/blog/categories/management/atom.xml" rel="self"/>
  <link href="https://www.romenrg.com/"/>
  <updated>2023-01-10T20:17:27+00:00</updated>
  <id>https://www.romenrg.com/</id>
  <author>
    <name><![CDATA[Romén Rodríguez-Gil]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[It’s not remote work. Async work is the real paradigm shift]]></title>
    <link href="https://www.romenrg.com/blog/2022/12/31/its-not-remote-work-async-work-is-the-real-paradigm-shift/"/>
    <updated>2022-12-31T01:25:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2022/12/31/its-not-remote-work-async-work-is-the-real-paradigm-shift</id>
    <content type="html"><![CDATA[<p>The Covid pandemic forced many companies to unwillingly transition to remote work, thinking of it as a temporary necessity. However, at least in tech, remote work has become the new normal.</p>

<p><img src="https://www.romenrg.com/images/remote-async-work.jpeg" alt="An image of the home office of a remote worker, where his mac laptop screen displays a Zoom meeting" /></p>

<p>But… Is switching to remote work just a matter of working from home and using Zoom? Simply replacing the physical meeting room in the office with a virtual one? Or is it deeper than that?</p>

<!-- More -->


<p>Many first-timers working remotely fail to realize that the key paradigm shift which remote work enables is “async work”; beyond the distributed, “remote” aspect itself.</p>

<p>This means that not only working from the same office is not needed, but also, that we don’t even need to work at the same time (for the most part).</p>

<p>However, since this async bit is less obvious, we will dig further into it in this article.</p>

<h2>Overcoming physical limitations</h2>

<p>Of course, enabling remote work is a prerequisite to async work. And working remotely has some minimal requirements on its own, which are worth reviewing quickly first.</p>

<p>Those of us working in the digital realm have no physical constraints to our work, apart from the very minimal ones: table, chair, computer and internet connection. Beyond that, we only have the artificial constraints that some companies (or ourselves) impose, either consciously or unconsciously.</p>

<p>If you work in software development, or, really, in any other knowledge-intensive job that doesn’t require specific physical elements to it; you don’t have to work from a particular location. This has been the case for quite a few years now, but collectively we seemed to need a pandemic to fully realize.</p>

<h3>So, what do digital workers and companies really need?</h3>

<ul>
<li>Computers, meeting the hardware requirements of the work, including a webcam and a microphone.</li>
<li>A tool to chat, which should also allow grouping conversations in channels / topics and threads, to make them manageable.</li>
<li>A tool to meet, supporting both video and audio; and with the ability to record meetings.</li>
<li>A tool to organize and track work (to create to-do lists / backlogs; set status to items: pending, in progress, completed; etc.).</li>
<li>A tool to keep and share work-related knowledge.</li>
</ul>


<h3>Some useful enhancements</h3>

<ul>
<li>A good microphone, camera and headset, beyond the built-in ones in your computer:

<ul>
<li>Video and audio quality are very important for a successful remote communication. Especially audio when you have many non-native speakers in the team. But also video, since non-verbal cues are a key part of human communication.</li>
</ul>
</li>
<li>Enough screen real estate:

<ul>
<li>To me, screen real estate is never too much.</li>
<li>Personally, I have two 28” monitors that I use constantly (e.g. one with the chatting tool and another one with a browser; or one with a browser and another one with the IDE). I use big font sizes, as my sight is not my greatest strength. So having two large screens really helps me.

<ul>
<li>Also, I find my 2 big screens very useful for remote meetings. I can keep the general participants' view in one of my 28” screens (letting me see all, or most, faces); while also keeping another screen either for whoever is speaking at a certain point or, especially, for the shared screen of whoever is presenting.</li>
</ul>
</li>
<li>Additionally, I also keep my 16” mac screen on a side, for secondary things such as music (Spotify), for instance.

<ul>
<li>In meetings, I also benefit from having this third monitor, to keep our chatting tool (Slack) handy there; or a browser window, useful if I have to search for something while in the meeting.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>But, even though this minimal setup is important, some people focus too much (or solely) on tools, and often forget the essential (and more complex) process changes. These are really the key to make the most out of distributed, asynchronous team collaboration.</p>

<h3>So, what are the best practices to work effectively as a fully distributed, asynchronous team?</h3>

<p>Beyond the minimal setup described above, some of the key practices to really be effective as a fully distributed and asynchronous team include:</p>

<ul>
<li>Minimizing sync times, and planning meetings ahead. Letting people have time to organize. Also, being mindful of the best overlapping hours of the attendees (as they are likely to be distributed across multiple timezones).</li>
<li>Recording meetings by default, as they are a great source of documentation later on.</li>
<li>Moving to written and async communication by default:

<ul>
<li>Written communication forces us to think more about the ideas that we want to convey; and also to be more careful expressing them, since our words are going to remain there, readable for a long time, and often visible to many.</li>
<li>By using channels and threads properly, in our chatting tool, we can avoid unnecessary noise, while also creating a great searchable knowledge-base for all coworkers, automatically.</li>
</ul>
</li>
<li>Using digital-native tools to cover all aspects of work.

<ul>
<li>E.g. in Software Development:

<ul>
<li>Github, or an equivalent advanced application built on top of SCM tools:

<ul>
<li>These are also tightly linked to written communication; e.g. in the form of PRs and their reviews, where a lot of async collaboration happens organically.</li>
</ul>
</li>
<li>Jira + Confluence; Notion, or similar:

<ul>
<li>For a more formal organization of work, planning and documentation.</li>
</ul>
</li>
<li>Slack / Microsoft Teams / Email:

<ul>
<li>For direct, mostly async, communication; per teams, topics or 1:1s.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>What is the minimum number of synchronous meetings needed?</h3>

<p>Assuming you are an individual contributor (IC), a minimal set of synchronous meetings could be defined by:</p>

<ul>
<li>A planning session of 1-2 hours held once every 2 weeks (or whatever the duration of cycles that best suits your team is).</li>
<li>A 1-2 hours check-in meeting in the middle of every cycle.</li>
<li>A 1-2 hours review + retrospective session at the end of the cycle, one or two days before the new planning session.

<ul>
<li>Honest retrospectives are extremely valuable; especially if all team members feel free to speak their minds, and all are trying to collectively improve processes and align, constructively.</li>
</ul>
</li>
</ul>


<p>The previous list is really what I consider to be the minimal set of sync meetings necessary, but some useful additions could be made, such as:</p>

<ul>
<li>A 1-2 hours meeting, at some point during the cycle, used as a longer-term planning session, in which to refine upcoming work; to keep a “ready” backlog and thus ease upcoming cycle-planning sessions.</li>
<li>1:1s with your manager, every other week or once a month, for 30 mins. And maybe similar meetigns with some other key team members as well.</li>
<li>Some less frequent meetings such as:

<ul>
<li>Quarterly planning meetings.</li>
<li>Yearly planning meetings.</li>
<li>Some especial, focused meetings, that might be required when starting a new initiative / project.</li>
</ul>
</li>
</ul>


<p>Also, I am a big fan of open, transparent companies; and I’ve been lucky to work at both <a href="https://www.cloudbees.com/">CloudBees</a> and <a href="https://turo.com/">Turo</a> recently, which fit that category. In these cases, so-called “all-hands” meetings are held every other week (or every month), typically lasting less than 1 hour every time. And I find them extremely valuable, to align the whole org (e.g. engineering) and/or the whole company. But in these meetings, which are usually recorded, the average IC is most likely going to be a listener. So they don’t really qualify as a “sync meeting”; even though attending these sessions live has many benefits, including being able to participate (either commenting or asking questions).</p>

<p>So, summarizing: If we take a quick look at the list above, necessary sync time translates to a range that goes from 3 to 10 hours per week.</p>

<p>Assuming the regular 40-hour work week, that means that only between 7.5% to 25% of the time has to be synchronous; while 75% to 92.5% of our work time can be fully asynchronous.</p>

<h2>What about the social or human side of work?</h2>

<p>This is a key aspect to take into account. Working remotely and asynchronously doesn’t mean we become robots. Making the workplace more “human” and developing some social ties with coworkers doesn’t require being in an office setting; and it doesn’t even require working synchronously.</p>

<p>Having said that, spending some synchronous time in social events is definitely good, maybe just a couple of hours a month. And even seeing each other in real life one or two times per year is definitely very positive.</p>

<p>Let’s try to summarize my take on the social side of remote and async work.</p>

<h3>Include some remote-friendly social activities</h3>

<p>Some that I’ve been part of and consider valuable include:</p>

<ul>
<li>Social synchronous meetings, maybe 1-3 hours per month:

<ul>
<li>They should definitely be optional for team members, but I highly encourage everyone to participate.</li>
<li>You might also consider recording them, so that those that were not able to attend can watch the recording and feel integrated, keeping the social context of the team.</li>
<li>In our case, we currently have 2 remote-but-synchronous social activities per month (both optional):

<ul>
<li>One casual social meeting. In this one-hour meeting we can talk about anything other than work. We often bring 2 topics beforehand, as placeholders, but discussion can move away from those topics entirely. We have also had meetings in which we have formed teams to play online light games, such as <a href="https://www.geoguessr.com/">GeoGuessr</a>.</li>
<li>A two-hour <a href="https://codingdojo.org/">Coding Dojo</a> session, where a team member proposes and facilitates a code kata (or architectural kata) and we work together on solving it. We might break the group down into multiple ones depending on the number of attendees. At the end we share learnings, comments, suggestions, etc. This is applicable to us as an engineering team, but I’m sure other teams can find equivalent types of activities.</li>
</ul>
</li>
</ul>
</li>
<li>Social channels in your chatting tool about common interests:

<ul>
<li>E.g.: board-games, cooking, travel, series, you name it…</li>
</ul>
</li>
<li>Have regular, short 1:1s with your different teammates; just to chat a bit and discuss things other than work, to keep a human connection. Even spending half an hour per month on an individual call with each of your closer teammates can already make a big (although subtle) difference in the daily work.

<ul>
<li>In a remote setting, most of the casual conversations that often happen in an office are lost, so forcing them a bit via 1:1s helps compensate for the loss, and lets us build human relationships with our colleagues.</li>
</ul>
</li>
</ul>


<h3>Spending some in-person time periodically is a good idea</h3>

<p>In my last two companies I’ve been working fully remote, and in both cases we have usually had at least 2 opportunities per year to meet face-to-face. In my experience, those events tend to be very energizing, and make me feel much more connected to both my peers and the business. I always come back home highly motivated.</p>

<p>So, meeting for a week or two, every six months or so, even though it is not really essential, I would say is highly recommended. Or at least once a year, to keep the human connection with colleagues. These in-person events can range from simply spending some time working next to each other, to having a company-wide event with talks from different areas. The latter has the additional benefit of breaking silos, letting us learn more about other teams and meet people we don’t often work with. Plus, spending some company-wide, in-person social time, is a great way to devirtualize (and humanize) people with whom we may have chatted (or even met in a virtual call), but who we have never seen in real life.</p>

<h2>The benefits of distributed and async work</h2>

<p>Ok, so far we have covered the needs remote teams have. We have also discussed the minimal time needed in synchronous calls. And we have gone through some tips on how to promote a healthy remote and async work environment.</p>

<p>But, why would we want to do all this? Are there any real benefits to it?</p>

<h3>A productivity booster</h3>

<p>Interruptions are a real productivity killer. I’ve suffered this in the past, working from an office setting. There is often the classic coworker that comes to your desk to ask a not-that-important question, every now and then; interrupting your flow (which maybe took an hour to get going), and now causing you to put extra effort, for the next 20 minutes, trying hard to get back to where you were.</p>

<p>And since there are many of such interruptions during a work day, several hours per day are wasted daily in offices, on average, due to interruptions. With the cost it has both directly (wasted time) and indirectly (negative effect on morale and, as with any other distraction, increased mistakes).</p>

<p>In contrast, by switching those questions to whatever chatting tool you use remotely, they become asynchronous, so you can keep your focus and then reply whenever you finish what you were doing (or whenever you voluntarily decide to switch focus).</p>

<p>If you want to learn more about the cost of interruptions, you can <a href="https://www.nexalearning.com/blog/bid/50317/6-startling-statistics-about-interruptions-at-work">read some articles</a> on it, including <a href="https://www.ics.uci.edu/~gmark/chi08-mark.pdf">scientific research</a>. Interruptions are definitely a big deal.</p>

<p>Another productivity-related benefit of remote and async work is that it forces us to schedule meetings beforehand. This typically leads to time optimization, preparing an agenda and agreeing on the need for the meeting to be held; avoiding unnecessary meetings and spending the minimal time required in the call, with the minimal number of people necessary.</p>

<p>Also, when meetings are recorded, people can decide to skip them if they don’t feel their presence is needed; and can always watch the recording if they feel something relevant was discussed. Recording also allows viewers to skip sections of the meetings that are not relevant to them, or play them at a faster speed, while maybe doing something else (especially when the meeting is not critically important and they only want to have an idea of what was discussed). This also leads to saving time, and being more efficient at work.</p>

<h3>Access to a wider talent pool</h3>

<p>This one is rather obvious. If you are hiring people that will need to go to your office every day, you are limited to people that live in your area and are willing to commute to the office daily (or most days). And / or to some people that might be willing to relocate.</p>

<p>When you switch to remote work, though, you expand significantly. At least to people that work in similar time zones but are far enough to not be able to commute, or people that, for different reasons, have issues getting to the office (not having a car, avoiding traffic jams, etc.). However, if you require synchronous presence of team members despite being remote, you are still imposing a big restriction on your candidates pool.</p>

<p>But when you go one step further, from remote to async work, then you can expand anywhere, despite having almost-incompatible timezones (provided the minimal sync time can be arranged). This switch lets you access the global talent pool almost without restrictions.</p>

<h3>Real flexibility to separate or blend life and work</h3>

<p>As a parent, I really value the flexibility that remote and async work brings to me. I can arrange my work day so that I can take my kids to school / day care, and/or pick them up; working in between. I can also have a quick walk with them in the afternoon while there is still sun; and then I can work a bit when they are asleep and it is quiet at home.</p>

<p>Your preferences might vary, and you might prefer to have a clear separation between your work and personal time. But the key here is that remote and async work lets you decide how you organize your professional self in the way that best fits your life.</p>

<h2>Some interesting resources</h2>

<p>Of course I’m not the first person to write about this, by any means. I’m simply sharing my experiences and views on this, to me, important topic.</p>

<p>Having said that, you might find other experiences and views useful. So I’m adding below some related articles, from relevant voices:</p>

<ul>
<li><a href="https://buffer.com/resources/asynchronous-communication/">Asynchronous Communication and Why It Matters For Remote Work, from Buffer</a></li>
<li><a href="https://about.gitlab.com/company/culture/all-remote/asynchronous/">How to embrace asynchronous communication for remote work, by GitLab</a></li>
<li><a href="https://lattice.com/library/what-is-asynchronous-work-heres-everything-you-need-to-know-to-implement-it-at-your-organization">What Is Asynchronous Work? Here’s Everything You Need to Know to Implement It at Your Organization, from Lattice</a></li>
<li><a href="https://twitter.com/shl/status/1222545212477599751">A Twitter thread by Sahil Lavingia, on Gumroad’s transition to fully asynchronous work</a></li>
<li><a href="https://remote.com/blog/why-you-should-be-doing-async-work">One article on “Why you should be working asynchronously in 2022”, from remote.com</a></li>
</ul>


<h2>Convinced?</h2>

<p>Did I manage to convince you? Or not at all?
Or were you already convinced?</p>

<p>What has your experience been with remote and async work so far?</p>

<p>I’ve probably missed some relevant points; and you might have encountered challenges that I’ve failed to mention (and which might be interesting to discuss). You may also have discovered better socializing approaches in these remote and async settings, or you might know about other tools/tips/processes that ease the transition for more traditional companies.</p>

<p>So, please, join the conversation in the comments and let’s keep discussing this interesting topic, remotely and asynchronously!</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2023, Jan 02</em>: Some general style improvements.</p>
  <p><em>2022, Dec 31</em>: First version published.</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Projects vs Software Products]]></title>
    <link href="https://www.romenrg.com/blog/2020/12/30/software-projects-vs-software-products/"/>
    <updated>2020-12-30T13:26:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2020/12/30/software-projects-vs-software-products</id>
    <content type="html"><![CDATA[<p>As a developer, you work on software projects, right? ...Or are they <em>software products</em>?</p>

<p>Like many others in the software industry, you might think those two concepts are synonyms; but they aren’t. In fact, whether the software being developed is considered a project or a product may have critical and non-trivial ramifications, in many aspects.</p>

<p><img src="https://www.romenrg.com/images/products_vs_projects.jpg" alt="Team meeting in which multiple colleagues discuss in a table, where several computres are opened. One man moves hands displaying confusion" /></p>

<p>The <em>not-so-subtle</em> differences between software projects and software products actually have a huge impact on our behavior, both from a business as well as from an engineering perspective.</p>

<!-- More -->


<p>For many years I’ve been trying to find the time to write about this key difference, to which many people in tech fail to give importance to. About a year ago, I had the opportunity to give a <a href="https://www2.slideshare.net/romenrg/agile-software-development-beyond-projects-ull">lecture</a> on this very topic. And now, I have finally decided to write about this important topic in more detail.</p>

<p>I'll start with definitions, digging into the key differences that derive from them. Afterwards, I'll explore the critical behavioral ramifications. However, if you just want a quick summary, feel free to jump directly to the <a href="#detailed-comparison">comparison table</a>.</p>

<h2>Let’s start with some definitions</h2>

<p>If we want to get a clear definition of "project" and “<a href="https://www.pmi.org/about/learn-about-pmi/what-is-project-management">project management</a>", the Project Management Institute (PMI) can probably be of some help. From their site we can extract two clear sentences that are relevant in this context:</p>

<ul>
<li>A <strong>project</strong> is temporary in that it has a defined beginning and end in time, and therefore defined scope and resources.</li>
<li><strong>Project management</strong>, then, is the application of knowledge, skills, tools, and techniques to project activities to meet the project requirements.</li>
</ul>


<p>Now, if we try to look for definitions of “<a href="https://en.wikipedia.org/wiki/Product_(business)">product</a>” and “<a href="https://en.wikipedia.org/wiki/Product_management">product management</a>”, we can probably summarize them as:</p>

<ul>
<li>A <strong>product</strong> is an object or system made available for consumer use; it is anything that can be offered to a market to satisfy the desire or need of a customer.</li>
<li><strong>Product management</strong>, then, drives the business case for product development and has an active role throughout its development, test and launch; being also involved in product change and lifecycle decisions and planning.</li>
</ul>


<p>Can you tell the key differences already?</p>

<h2>Digging into the differences</h2>

<h3>Two key differences, from definitions</h3>

<p>From the definitions above, we can clearly see the first big difference: the temporary nature of a project. <strong>Projects are time-constrained efforts</strong>, supposed to have a defined beginning and end date. This clearly-defined temporary nature does not apply to products, which don’t have such predefined beginning and end in time, being subject to market demand instead.</p>

<p>Moreover, those clearly defined time boundaries for projects also bring the second clear distinction: fixed scope and resources (i.e. the project requirements). This doesn’t apply to products either. <strong>Products are evolving creatures by nature</strong>. While project management cares about meeting those predefined project requirements; product management cares about the business case for the product, constantly learning from users and having an active role in the product lifecycle, defining new features and/or re-prioritizing work, adapting to market needs.</p>

<h3><a id="detailed-comparison"></a>Detailed comparison</h3>

<p>When I was preparing my lecture, I found a very nice article by Sriram Narayan in Martin Fowler’s blog. In his article, Sriram added a very comprehensive <a href="https://martinfowler.com/articles/products-over-projects.html#WhatIsProduct-mode">table comparing project-mode and product-mode</a>.</p>

<p>For this article, I have created my own simplified table; focusing only on some key aspects I would like to compare for the two cases.</p>

<table>
<thead>
<tr>
<th>Aspect                                  </th>
<th> Project                                   </th>
<th> Product                                                    </th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Duration</em>                              </td>
<td> Fixed. Limited (e.g. <em>X</em> months).           </td>
<td> Unknown. Depending on market (from <em>X</em> weeks to <em>Y</em> decades).</td>
</tr>
<tr>
<td><em>Scope</em>                                 </td>
<td> Supposedly known and fixed.               </td>
<td> Unknown. Constant learning and adaptation is assumed.</td>
</tr>
<tr>
<td><em>Costs</em>                                 </td>
<td> Supposedly known and fixed.               </td>
<td> “Pay as we go”, i.e. weekly / monthly / yearly (e.g. salaries).</td>
</tr>
<tr>
<td><em>Technical quality</em>                     </td>
<td> Not rewarded; thus, not prioritized. Projects are seen as one-off efforts, so maintainability is not valued. </td>
<td> Critical. Product development is a continuum. Technical excellence is key to keep up the product’s iterative and incremental evolution.</td>
</tr>
<tr>
<td><em>Key mindset aspects</em>                   </td>
<td> Fixed mindset. “We know what we have to build”. So, “just do it”. Don’t question things. </td>
<td> Learning mindset. “We are constantly learning and adapting”. Data-driven. Question decisions constantly.</td>
</tr>
<tr>
<td><em>Key engineering skills</em>                </td>
<td> Framework-specific knowledge. <br/><br/> Everything is fixed, from features to technologies. "We just need to write the code as quickly as possible". </td>
<td> <a href="https://github.com/romenrg/evergreen-skills-developers">Evergreen development skills</a>. <br/><br/> Everything may change, from features to technology. "We need to learn and adapt constantly". "We apply technical best practices". "Teamwork, mentoring and collaboration are key".</td>
</tr>
</tbody>
</table>


<h2>Software development is mainly about building products</h2>

<p><a href="https://www.romenrg.com/blog/2015/09/28/why-asking-developers-for-time-estimates-in-software-projects-is-a-terrible-idea-and-how-to-bypass-it-with-scrum/#the-role-of-evil-contracts">Software development involves many unknowns</a>. Those unknowns make it extremely hard for us to have the certainties "projects" require upfront. At the beginning is when we know the least about the software what we are building.</p>

<h3>In the digital economy, software evolves constantly</h3>

<p>Think of the software you use in your daily life. Isn't it always evolving? You receive constant updates, not only for bugfixing; but also to add new features, <a href="https://www.romenrg.com/blog/2013/01/02/improving-the-ui-to-achieve-a-better-ux-my-experience-in-stat4you/">improve the UX</a>, or even to remove pieces that are no longer relevant.</p>

<p>Does this fit into the definition of "project" we saw before? Do these applications have “a defined beginning and end in time”? And how about scope and resources, do they seem to have been fixed upfront?</p>

<p>Change and evolution are natural in products, but not in projects. Projects don't welcome change. And software evolves constantly.</p>

<h3>Software products and outsourcing are not a good fit</h3>

<p>Traditionally, it has been common for non-software organizations to outsource software development initiatives. For instance, Government agencies typically outsource their “software development projects”, even though in most cases they should have been thinking in terms of software products instead.</p>

<p>Think of an e-gov application in which citizens can perform their bureaucratic obligations from home. Isn’t that a software product? It will have to evolve, as new laws are passed. And it is not supposed to have a predefined teardown day. Instead, we would probably expect it to be there for the long run. Over time, citizens (users) will discover bugs, which will have to be addressed; and we will likely complain about it and/or suggest improvements. There might also be scalability issues and/or outages that will have to be tackled.</p>

<p>Treating these software products as outsourced projects means that the owners will hire an external company to build it. Usually the cheapest. The project will have a fixed scope, and the parties will agree on a timeline and on a price. The external company will complete the project, according to those parameters and hand it over to the customer. Then, usually, the external company forgets about it. If changes are desired in the future, new projects will be defined and outsourced. Often to different companies.</p>

<p>In most cases, the company that is hired to build the software is not involved in the discovery process with potential users. They are not involved in the prioritization of features. They are just hired to do X, as quickly and cheaply as possible. And since they are not rewarded for software quality nor for asking questions, they will probably build it without maintenance in their minds. And they won’t question decisions nor worry about gathering data.</p>

<p>Now, think how different it would be if it was treated as a software product, with an in-house team building it and participating in all the process, from conception to evolution. The team would understand needs, motivations and strategic goals; they would be engaged. They would ask questions. Hypotheses could be defined together and data collection and learning would be in everybody’s mind since the beginning. Working in small increments would be easier. Writing maintainable code becomes crucial. Changes are welcome. And quality matters.</p>

<p>Being aware of the importance of software products in the digital economy means that, if your software is (or is becoming) the core of your business, then you keep software development in-house. Nowadays, every company is a software company. Think of Airbnb, Lyft or Netflix. These businesses could have opted to externalize software development, but they realized the software products they were building are the core of their business. They realized they were software companies.</p>

<h3>How about open source "projects"?</h3>

<p>It is common in the software industry to hear people refer to “open source projects”. In most cases, though, I would argue we should be talking about “open source products” instead.</p>

<p>I have been an open source software (OSS) user for many years, and I have also contributed to open source myself. One example of OSS to which I have contributed is <a href="http://jenkins.io/">Jenkins</a>. Jenkins is the leading open source automation server. It has been around for more than 15 years, with millions of installations worldwide. And it has evolved significantly, including the rename from Hudson, the recent UI changes, and the thousands of ever-evolving plugins, created by a thriving open source community. Based on this data and the previous definitions, should we consider Jenkins an “open source project” or, rather, an “open source product”?</p>

<p>I understand that, when somebody (like Kohsuke with Jenkins) starts to build an open source software, they might have a limited and well defined idea. And they may work on a “project” to make it happen. A project to build the first set of fixed features for their idea. But then, if it is successful, that initial project leads to a product that keeps evolving in unanticipated ways. Scope is no longer fixed, as the community starts to bring new ideas and prioritize their development; and there is no defined “end date”.</p>

<p>Successful open source "projects" are here to stay, for a long time. But their success will keep them evolving within their communities, as <em>software products</em>.</p>

<h2>My personal take</h2>

<p>As you may have guessed after reading this article, I’m a big fan of building software as products. I have built many in my career; and <a href="https://www.romenrg.com/blog/2015/03/17/10-plus-1-valuable-lessons-i-learned-from-my-failed-startup/">I’ve learned a lot</a> from those experiences.</p>

<p>But building software as products is not just what I enjoy the most. It is truly the way I believe we should be building software, to get the most out of it.</p>

<p>Software projects are dead. Long live <em>software products</em>.</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2021, Jan 10</em>: Improved introduction, incl. reference to comparison table, as a TL;DR resource.</p>
  <p><em>2020, Dec 30</em>: First version published.</p>
 </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everything 'as-code']]></title>
    <link href="https://www.romenrg.com/blog/2019/12/31/everything-as-code/"/>
    <updated>2019-12-31T20:14:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2019/12/31/everything-as-code</id>
    <content type="html"><![CDATA[<p>If you are in the software industry, and specially if you are in the DevOps space, you are probably familiar with the concepts of "Infrastructure as code" and "Configuration as code", which are very popular lately. But, what if that same idea could be applied to everything else in a software company? Aren't documentation and training great candidates for becoming "as-code" as well?</p>

<p><img src="https://www.romenrg.com/images/dwjw2019_lisbon_talk.jpg" alt="Picture taken during the presentation at DWJW 2019. I'm showing the tech stack of the new CloudBees' training platform" /></p>

<p>During 2019 I've been intensively working on this idea at <a href="https://standard.cbu.cloudbees.com/">CloudBees University</a>, along with my colleagues. Nowadays, for our training platform and courses everything is done "as code".</p>

<p>Sounds interesting? Keep reading to learn more about it and/or watch the <a href="https://www.romenrg.com/blog/2019/12/31/everything-as-code/#training-as-code-talk">"Training As Code" talk</a> my colleague Mark Waite and I delivered at DevOps World | Jenkins World in December 2019.</p>

<!-- More -->


<h2>Infrastructure and configuration as code</h2>

<p>Moving infrastructure definition and application configuration to code has been a huge step forward for us as an industry. It has allowed us to automate many "opearions" tasks, saving significant time, reducing human errors and allowing us to have a clear "state" of our software products, their infrastructure and configuration. And it has also contributed to bridge the gap between "development" and "operations", improving collaboration between these teams.</p>

<p>When it comes to tools and technologies, Terraform, Chef, Puppet, Salt, Ansible, Docker and Kubernetes, among others, have played a crucial role in this movement; enabling engineers to describe infrastrucutre and configuration as code.</p>

<h2>How about documentation?</h2>

<p>It's been a while since many technologies and tools have shifted their documentation to code. Many of the most popular open source tools are hosted in GitHub, and typically most of them contain at least a README file in the repo itself, often written in Markdown (but can also be written in alternative languages, such as <a href="http://asciidoc.org/">AsciiDoc</a>).</p>

<p>Also, blogging tools, like <a href="https://jekyllrb.com/">Jekyll</a>, have geared to this concept as well; using Markdown files to represent the different posts, that are later rendered into HTML.</p>

<p>And this trend is also accelerating. Nowadays I see many relevant projects and tools shifting their documentation sites to code. Among the benefits, not only does it allow us to treat everything that belongs (or relates to) a software product equally, but it also improves collaboration between teams. Engineers are much more likely to contribute to documentation if it is written as code, and specially if it is in the very same repo in which the code is. This shift is actually helping to break silos again, as it did between development and operations.</p>

<p>Moreover, having documentation as code makes it easier for us to include documentation-specific stages in our CI/CD pipelines, such as spelling checks or broken links validations.</p>

<h2>Combining these concepts in CloudBees University</h2>

<p>In CloudBees University we offer several courses, most of them focused on <a href="https://jenkins.io/">Jenkins</a> (targeting audiences with different level of knowledge in Jenkins administration or Jenkins pipelines). Those courses are highly technical and have significant "hands on" pieces. The content is displayed as a website, while for the hands on part, we provide students with lab environments in which they have the different tools they need for the course, with the specific configuration needed for the different exercises they have to complete.</p>

<h3>Everything "as code"</h3>

<p>Needless to say everything is done as code, from our content to the lab environments and their configuration.</p>

<p>Want to know more? Mark and I explained all the details in our talk at DevOps World | Jenkins World 2019, which we recorded and is available below.</p>

<h4 id="training-as-code-talk"> Training As Code: Applying CI & CD to Training Development</h4>




<iframe width="560" height="315" src="https://www.youtube.com/embed/1hda-bVYaVc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>As we said during the talk, we are still learning and improving, but it's been a great experience. This approach has allowed us to achieve things that wouldn't have been possible if we were relying on manual tasks. Now we have a single source of truth for everything in CloudBees University, we have peer-reviews for any change we make, clear versioning and history and, of course, fully automated <a href="https://www.romenrg.com/blog/2017/12/31/continuous-integration-delivery-deployment/">CI/CD</a> processes, for integrations and deployments.</p>

<p>Now, how about you? Are you doing "everything as code" already?</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2020, Oct 21</em>: Minor style improvements</p>
  <p><em>2020, Jan 12</em>: Minor fixes (typos) and addition of examples of docs-specific CI checks.</p>
  <p><em>2020, Jan 11</em>: Major rewrites to the article. First "public" version.</p>
  <p><em>2019, Dec 31</em>: Original draft.</p>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Makes a Great Software Engineer]]></title>
    <link href="https://www.romenrg.com/blog/2018/12/29/what-makes-a-great-software-engineer/"/>
    <updated>2018-12-29T10:09:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2018/12/29/what-makes-a-great-software-engineer</id>
    <content type="html"><![CDATA[<p>The software industry has been growing significantly for the last few decades, and this trend seems to only be accelerating.</p>

<p>Due to this fast growth, there has been an ever-increasing demand for software engineers and, since there are not enough developers to meet the demand, many companies often fail to cover their open positions. But, is it also possible that we are looking at the wrong skills when hiring?</p>

<p><img src="https://www.romenrg.com/images/question_unsplash.jpg" alt="Picture of a cofee mug with a question mug" /></p>

<p>Most job descriptions simply list a set of technologies as the necessary “profile” for the open position. However… Aren’t there other skills that could have a higher impact on developer’s success?</p>

<p>Are we looking at the right skills?</p>

<!-- More -->


<h2>Beyond languages and frameworks</h2>

<p>So, despite the shortage of software engineers, we keep seeing, with dismay, that many companies keep restricting their opening positions to people with experience in very specific sets of technologies. Often stating that “X years of experience in <em>&lt;new framework Y></em>” is a key requirement.</p>

<p>Have you thought that it's very likely that <a href="https://sizovs.net/2018/12/17/stop-learning-frameworks/">you will not be using <em>&lt;new framework Y></em> in two years</a>? When that happens, which would be the skills your team will need to keep being productive?</p>

<p>It's great to keep an eye on new technologies, of course, as they might bring relevant innovations to our businesses; but focusing mostly on trendy frameworks or on our current tech stack, when hiring, has negative impacts in the long-run and, as a general practice, is very harmful to our industry. We need to move forward. <strong>This focus on languages and frameworks hints there is a fundamental misunderstanding in what makes a great software developer.</strong></p>

<h2>The software industry is evolving constantly</h2>

<p>Granted, if you need an urgent short-term solution for a framework-specific problem, you may want to find someone that knows it deeply. However, more often than not, those short-term needs hide long-term problems in a company.</p>

<p>Developing software is often about making processes more eficient and providing solutions to existing challenges. Also, we now know that due to the fast pace at which both technology and our needs evolve, <a href="https://www.romenrg.com/blog/2015/09/28/why-asking-developers-for-time-estimates-in-software-projects-is-a-terrible-idea-and-how-to-bypass-it-with-scrum/">software development is a continuous process</a>. In most cases software products don’t have an end. We add new features, teams change, companies pivot in their strategy, new technologies bring new opportunities for enhancements, consumer demands change... And we just keep evolving our digital products.</p>

<p>This constant innovation brings constant changes, both in business and in technology. Our products change, as well as the languages, frameworks, tools and devices we use.</p>

<h2>Fortunately, key skills are evergreen</h2>

<p>Isn't there “evergreen” technical knowledge that can be portable across frameworks? Aren't "soft" skills vital? How about code readability, learning-ability and communication skills? Wouldn't those skills be more valuable than framework-specific knowledge in this ever-evolving world?</p>

<h3>It’s not just about technology</h3>

<p>There are skills that often have a higher impact on success than technical knowledge. The so-called "soft" skills (or <a href="https://github.com/romenrg/evergreen-skills-developers#core-skills-aka-soft-skills">core skills</a>) are crucial for any software developer: being able to communicate properly (via email, chat or face-to-face), sharing knowledge with coworkers, engaging in constructive discussions...</p>

<p>Every day more relevant voices in the industry are raising concerns about this. Sam Altman recently shared his <a href="https://twitter.com/sama/status/981690839280771073?lang=en">hiring priorities</a>: values first, aptitude second, specific skills third. Buffer is also a very innovative company in this area, with a <a href="https://open.buffer.com/hiring-process/">culture-fit-based hiring process</a>, where "soft" skills play a key role.</p>

<h3>But there is also technical evergreen knowledge</h3>

<p>Despite the constant change of technology, the technical principles and best practices that also make a software engineer great, are portable across frameworks.</p>

<p>This is a heated discussion. It is indeed difficult to name "fundamentals" or even to draw a line separating technologies that are evergreen from those that are just temporary, as can be seen in the dicussion between <a href="https://twitter.com/zachleat/status/1074776108422307840">Zach Leatherman</a> and <a href="https://twitter.com/seldo/status/1075027798333493249">Laurie Voss</a>.</p>

<p>However, when I refer to "evergreen" technical knowledge, I mean <a href="https://github.com/romenrg/evergreen-skills-developers#general-technical-knowledge">principles</a>, such as OOP and SOLID; data structures, SCM, Clean Code guidelines or DevOps practices.</p>

<h3>The repository of "evergreen" knowledge to the rescue</h3>

<p>So, since 1) nowadays most opennings still focus only on technologies and 2) coming up with the "evergreen" knowledge that we could use for hiring interviews is not trivial, I have gone ahead and created <a href="https://github.com/romenrg/evergreen-skills-developers">this GitHub repository</a>, which goal is to serve as a pool of ideas to condut a fair assessment of skilled software developers / engineers.</p>

<p>As stated in the repository, the purpose of this work is to serve as an alternative resource for conducting hiring interviews of software developers / engineers. It focuses on software development best practices, cross-framework principles and other portable skills; instead of the usual focus on specific languages, frameworks and trends, which tend to quickly become outdated and often don't reflect the real value software developers / engineers bring to the organization.</p>

<p>It is also worth mentioning that it is a work in progress, so important knowledge might be missing, existing bullets can probably be improved and better grouping strategies could be found. For those reasons, any contributions (i.e. PRs) are welcome. Please feel free to propose changes following <a href="https://github.com/romenrg/evergreen-skills-developers/blob/master/CONTRIBUTING.md">the contributing guideline</a>.</p>

<h2>Be the change you want to see in the world</h2>

<p>We all have a role in moving our industry forward. As a manager, think twice when designing the description for your new open position and <a href="https://github.com/romenrg/evergreen-skills-developers">look for ideas beyond a list of technologies</a>; as an individual contributor, when you are asked about the skills your next coworker should have, ask for principles and best-practices; as a candidate, highlight your "evergreen" knowledge and its importance. We owe it to the profession we love.</p>

<p>I have created the <a href="https://github.com/romenrg/evergreen-skills-developers">evergreen skills repository</a> as my two cents' contribution to this discussion. As I wrote before, it is a work in progress, which means there is a lot of room for improvement. I have added contributing guidelines and all constructive PRs are welcome... So I look forward to you contributions!</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2018, Dec 30</em>: Major rewrites to the article. First "public" version.</p>
  <p><em>2018, Dec 29</em>: Original draft published.</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Integration, Delivery and Deployment: Key Differences]]></title>
    <link href="https://www.romenrg.com/blog/2017/12/31/continuous-integration-delivery-deployment/"/>
    <updated>2017-12-31T18:46:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2017/12/31/continuous-integration-delivery-deployment</id>
    <content type="html"><![CDATA[<p>Continuous Integration, Continuous Delivery, and Continuous Deployment are key modern practices in software development. These techniques help us reduce integration problems, automate quality assessment and make deployments much more predictable and less error prone, allowing us to deploy easily and frequently. But… Do you really know the differences between the three?</p>

<p><img src="https://www.romenrg.com/images/two_paths_fork_unsplash.jpg" alt="Picture of a fork in the trail in a forest, leading to two alternative paths" /></p>

<p>The aim of this article is to help clarify what do these techniques mean and highlight the benefits each one provides. We will also analyze which one should be chosen depending on the circumstances.</p>

<!-- More -->


<p>This year I have been deeply involved in the subject, since I have been working on setting up Continuous Integration and Continuous Delivery in <a href="http://www.gobiernodecanarias.org/platino/">Platino</a>, which is a big government project that has been around for almost 10 years. Platino receives tens of millions of requests every month and has a considerable codebase, being composed of more than 50 web services and 9 web applications.</p>

<p>During this time I have realized that, despite the importance of these practices, many professionals in the industry still miss the differences between the three, often talking about them indistinctly in conversations, which creates a lot of confusion around the topic. So, let's check the differences:</p>

<h2>Continuous Integration</h2>

<p>The concept of Continuous Integration (CI) was originally proposed by Grady Booch in 1991 and later integrated into <a href="http://www.extremeprogramming.org/">Extreme Programming</a>. From then on, specially thanks to the <a href="http://agilemanifesto.org/">Agile Software Development</a> movement (as well as <a href="https://www.atlassian.com/devops">DevOps culture</a>), the technique has been widely adopted in the industry.</p>

<h3>Core proposition</h3>

<p>The core proposition of Continuous Integration is associated with Version Control Systems (VCS). It was originally described as a simple technique, which consisted of integrating developers' work (their working copies or branches) to the mainline (<em>trunk</em> in subversion or <em>master</em> branch in git) at least once a day.</p>

<p>The idea behind these daily integrations to the mainline is to reduce integration problems, which are usually caused by the complexity of merging the work of developers that have been working isolatedly for a while. By integrating daily or after each commit, the complexity of the merge process is drastically reduced, as can be seen in the following example:</p>

<p><a href="https://www.romenrg.com/images/branches_without_ci.png"><img src="https://www.romenrg.com/images/branches_without_ci.png" alt="Image of two developers working isolatedly over time, creating several commits before merging" /></a></p>

<p><em>Example of two developers creating several commits in their corresponding branches before merging. Squares represent commits and the circle represents the big merge that has to be made at the end.</em></p>

<p><a href="https://www.romenrg.com/images/branches_ci.png"><img src="https://www.romenrg.com/images/branches_ci.png" alt="Image of two developers applying continuous integration, integrating each change into the mainline" /></a></p>

<p><em>Example of two developers applying the original concept of Continuous Integration, integrating every change into the mainline. As before, squares represent commits and circles represent merges, which are much simpler now, due to the high frequency of integration.</em></p>

<h3>Extended Continuous Integration</h3>

<p>Although the core proposition of CI, described above, has value on itself, <strong>the definition of Continuous Integration was soon broadened</strong>. Nowadays, it often implies the existence of a CI Server (such as <a href="https://jenkins-ci.org/">Jenkins</a>) that, once a new change is made to the mainline of the VCS, executes a <a href="https://jenkins.io/doc/book/pipeline/">Continuous Integration Pipeline</a>. These pipelines are formed of different stages, executed sequentially on every integraton. Their goal, <a href="https://www.martinfowler.com/articles/continuousIntegration.html">as Martin Fowler states</a>, is <strong>to verify every integration with an automated build</strong>, to detect integration errors as quickly as possible. These builds include at least the compilation of the source code and the execution of unit tests, although in many cases other stages such as packaging, execution of integration / end-to-end tests and static code analysis are also included in these Continuous Integration Pipelines.</p>

<p>In this extended definition, the pipeline can either finish successfully or a failure can be produced in any of the stages (tests failing, static analysis not passing a defined threshold….). Usually, in the event of a failure, a notification email is sent to the person that created the last commit (probably the one causing the failure). In such cases, in order to really get the benefits of Continuous Integration, it should be a priority for the team to keep the Continuous Integration status <em>green</em> (passing) instead of <em>red</em> (failing), fixing any problem as soon as it is detected (<a href="https://continuousdelivery.com/foundations/continuous-integration/#faq">ideally in less than 10 minutes</a>).</p>

<p>Following this approach, automated builds with several checks are performed to our code every time we integrate changes, allowing us to detect any issues in an early stage. <strong>This quick detection of problems makes fixing them much cheaper than in traditional approaches</strong>. When these automated builds are not in place, detection of problems tends to occur much later, often during QA or deployment phases, and many times in production, after having deployed the new version. In those cases, days, weeks or even months have passed and developers have switched context, making it difficult for them to remember the particular cases they were working on when the problem was produced. Moreover, the higher pressure for deployment deadlines at those later stages usually leads to poorer solutions, that not only hinder code quality (reducing its readability and mantainability) but also tend to introduce new bugs.</p>

<h2>Continuous Delivery vs Continuous Deployment</h2>

<p>Once Continuous Integration is set, we may decide to continue improving our processes. The next step would be automating deployments to production, making them faster and safer. Here is where the two remaining techniques (Continuous Delivery and Continuous Deployment) subtly differ, as can be see in the following diagram:</p>

<p><a href="https://www.romenrg.com/images/continuous_delivery_vs_deployment.png"><img src="https://www.romenrg.com/images/continuous_delivery_vs_deployment.png" alt="Diagram showing usual stages of Continuous Integration and the differences between Continuous Delivery and Continuous Deployment" /></a></p>

<p><em>Difference between Continuous Delivery and Continuous Deployment</em></p>

<h3>Differences explained</h3>

<p><a href="https://continuousdelivery.com/">Continuous Delivery was described by Jez Humble</a>, as <em>"the ability to get changes of all types [...] into production, or into the hands of users, safely and quickly in a sustainable way"</em>. <strong>Continuous Delivery does not necessarily involve deployment to production on every change</strong>. We just need to ensure that our code is always in a deployable state, so we can deploy it easily whenever we want. On the other hand, Continuous Deployment requires every change to be always deployed automatically, without human intervention.</p>

<p>Thus, as can be seen in the image above, if we decide to enhance the pipeline so that, once the Continuous Integration stages are completed, the new artifact is automatically deployed to production, we talk about <strong>Continuous Deployment</strong>. On the other hand, if we manage to automate everything, but decide to require a human approval in order to proceed with the deployment of the new version, we are talking about <strong>Continuous Delivery</strong>. The difference is subtle, but it has huge implications, making each technique appropriate for different situations, as we will see below.</p>

<p>If you need some other references, appart from this article, to be convinced about this difference, notice that a few years ago <a href="https://puppet.com/blog/continuous-delivery-vs-continuous-deployment-what-s-diff">Puppet published a similar comparison</a> in their blog. Also, <a href="https://www.atlassian.com/continuous-delivery/ci-vs-ci-vs-cd">Atlassian has published a longer article</a> on the topic. I hope these articles help clarify these concepts, avoiding the current confusion with them.</p>

<h3>When is Continuous Deployment recommended and when should we opt for Continuous Delivery?</h3>

<p>In general, <strong>Continuous Deployment is great for B2C products</strong>, since as consumers we are used to the constant change of software products, usually assuming their changes without major problems. In fact, consumer companies such as <a href="https://research.fb.com/publications/continuous-deployment-at-facebook-and-oanda/">Facebook or Netflix follow this approach</a>, deploying small changes several times a day to production.</p>

<p>However, <strong>in B2B products as well as in government projects</strong>, it is <strong>often</strong> necessary to include human control to activate deployments to production. In these cases, our changes may affect people and processes in other companies or departments, making it important for us to announce release dates with enough time, so everybody is able to update their processes, learn to use the new features we are about to release or even adapt their software to our API changes. In this context, applying Continuous Deployment (deploying automatically every change to production) could make other software crash, prevent people from doing their job or even lead to economic and legal issues. That is why for these cases, in which we have to set a fixed deploy date, <strong>Continuous Delivery is the technique of choice</strong>, as is our case in Platino. Following this approach we can also automate the whole process, but we provide human control to execute deployments to production, thus controlling when the new version is released.</p>

<h2>Go ahead!</h2>

<p>As mentioned above, these processes are key elements in modern-day software development and provide a significant competitive advantage to software companies applying them. As we have seen above, depending on the software being developed and its usage, we may not be able to opt for Continuous Deployment, being Continuous Delivery the alternative of choice. However, Continuous Integration is the essential practice that serves as a basis for the other two, making it the preferred choice to start off with.</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2018, Jun 24</em>: Figure 'continuous delivery vs continuous deployment' improved.</p>
  <p><em>2018, May 28</em>: Overall style improvements, rephrasing last section, adding a better description and improving example images.</p>
</div>

]]></content>
  </entry>
  
</feed>
