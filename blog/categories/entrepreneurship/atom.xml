<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Entrepreneurship | Blog @romenrg]]></title>
  <link href="https://www.romenrg.com/blog/categories/entrepreneurship/atom.xml" rel="self"/>
  <link href="https://www.romenrg.com/"/>
  <updated>2023-12-31T17:31:22+00:00</updated>
  <id>https://www.romenrg.com/</id>
  <author>
    <name><![CDATA[Romén Rodríguez-Gil]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Resilience: Overcoming Adversity and Finding Balance]]></title>
    <link href="https://www.romenrg.com/blog/2023/12/31/building-resilience-overcoming-adversity-and-finding-balance/"/>
    <updated>2023-12-31T16:57:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2023/12/31/building-resilience-overcoming-adversity-and-finding-balance</id>
    <content type="html"><![CDATA[<p>Resilience is the ability to bounce back from setbacks. It is definitely a critical skill to have, especially during difficult times; although it is often overlooked.</p>

<p><img src="https://www.romenrg.com/images/resilience-man-sunrise-nature.jpeg" alt="An image of a man, taken from behind, in nature, looking at sunrise" /></p>

<p>Personally, I have always considered myself quite resilient. However, 2023 has really made me prove it. And, to be honest, it has been a very challenging year. That is why I figured that writing about it would be the best idea for my end-of-year article.</p>

<!-- More -->


<p>When we face challenging situations in life, especially those that cause profound damage to our life pillars, our self-esteem and/or our mental health in general; it might be hard to find purpose, meaning and/or maintain a healthy lifestyle. Plus, for knowledge workers, it is especially hard to stay productive in such circumstances.</p>

<p>However, there are some tips that can be very useful to help us bounce back, building resilience and balance, in both personal life and work:</p>

<ol>
<li><p><strong>Prioritize self-care</strong>: Taking care of oneself is essential, especially during difficult times. Make sure you are getting enough sleep, eating healthy, and exercising regularly. You can also try meditation or other relaxation techniques to help manage stress. And I would highly encourage you to start one fun social activity, be it cooking lessons, acting classes or dance lessons; to meet new people and take a break from problems, while doing something new and fun.</p></li>
<li><p><strong>Set boundaries</strong>: It is important to set boundaries between your personal life and work. This can include setting specific work hours, turning off your phone or email after work hours, and taking breaks throughout the day. Also, you might need to take time off to take care of your mental health depending on the seriousness of the challenge. Think of it as if it was a serious physical injury. Wouldn’t you go on medical leave if that was the case? The support of your colleagues and manager are key as well. Be as open to them about your situation as you can, this will help them empathize and understand your situation.</p></li>
<li><p><strong>Build a support system</strong>: Having a strong support system can help you get through tough times. This can include friends, family, or even a therapist. Don’t be afraid to reach out for help when you need it. We, as humans, are social creatures; and no matter how self-sufficient you are, certain situations are too much for an individual to handle without support.</p></li>
<li><p><strong>Stay positive</strong>: It is important to stay positive and focus on the things that you can control. And let go of those that you cannot control. Try to find the silver lining in difficult situations and focus on the things that you are grateful for.</p></li>
<li><p><strong>Practice resilience</strong>: Resilience is a skill that can be developed over time. It is important to practice resilience during difficult times. This can include setting goals, staying focused, and taking small steps towards your goals every day. But don’t be too hard on yourself. It is ok to have bad days. However, in those days, don’t stop prioritizing self-care and the good habits you are building, including your social routines, which are critical in rebuilding your mental health.</p></li>
<li><p><strong>Find purpose</strong>: We all need a project in life, a long-term goal. Something to strive towards, which motivates us long term. Something that gives meaning to our life. Without a purpose, life can turn into a depressing, self-consuming void. Personally, my main purpose revolves around two little people, who bring profound meaning to my life. For them, I strive to be the best version of myself, willing to endure anything to care for them. Aday and Haridian, my son and daughter. Your father loves you both, with all my heart. And always will. This love is unconditional and unwavering.</p></li>
</ol>


<p>Well, I think the former 6 points are critical when trying to overcome difficult situations. Hope this article helps others as much as it helps myself.</p>

<p>In summary, it is okay to take time for yourself and prioritize your well-being. Building resilience and reconstructing your life during tough times takes time and effort, but it pays off when you are finally able to bounce back.</p>

<p>Remember, nurture and love yourself. Ultimately, you are your lifelong companion, the one constant presence that will surely be with you throughout your entire journey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It’s not remote work. Async work is the real paradigm shift]]></title>
    <link href="https://www.romenrg.com/blog/2022/12/31/its-not-remote-work-async-work-is-the-real-paradigm-shift/"/>
    <updated>2022-12-31T01:25:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2022/12/31/its-not-remote-work-async-work-is-the-real-paradigm-shift</id>
    <content type="html"><![CDATA[<p>The Covid pandemic forced many companies to unwillingly transition to remote work, thinking of it as a temporary necessity. However, at least in tech, remote work has become the new normal.</p>

<p><img src="https://www.romenrg.com/images/remote-async-work.jpeg" alt="An image of the home office of a remote worker, where his mac laptop screen displays a Zoom meeting" /></p>

<p>But… Is switching to remote work just a matter of working from home and using Zoom? Simply replacing the physical meeting room in the office with a virtual one? Or is it deeper than that?</p>

<!-- More -->


<p>Many first-timers working remotely fail to realize that the key paradigm shift which remote work enables is “async work”; beyond the distributed, “remote” aspect itself.</p>

<p>This means that not only working from the same office is not needed, but also, that we don’t even need to work at the same time (for the most part).</p>

<p>However, since this async bit is less obvious, we will dig further into it in this article.</p>

<h2>Overcoming physical limitations</h2>

<p>Of course, enabling remote work is a prerequisite to async work. And working remotely has some minimal requirements on its own, which are worth reviewing quickly first.</p>

<p>Those of us working in the digital realm have no physical constraints to our work, apart from the very minimal ones: table, chair, computer and internet connection. Beyond that, we only have the artificial constraints that some companies (or ourselves) impose, either consciously or unconsciously.</p>

<p>If you work in software development, or, really, in any other knowledge-intensive job that doesn’t require specific physical elements to it; you don’t have to work from a particular location. This has been the case for quite a few years now, but collectively we seemed to need a pandemic to fully realize.</p>

<h3>So, what do digital workers and companies really need?</h3>

<ul>
<li>Computers, meeting the hardware requirements of the work, including a webcam and a microphone.</li>
<li>A tool to chat, which should also allow grouping conversations in channels / topics and threads, to make them manageable.</li>
<li>A tool to meet, supporting both video and audio; and with the ability to record meetings.</li>
<li>A tool to organize and track work (to create to-do lists / backlogs; set status to items: pending, in progress, completed; etc.).</li>
<li>A tool to keep and share work-related knowledge.</li>
</ul>


<h3>Some useful enhancements</h3>

<ul>
<li>A good microphone, camera and headset, beyond the built-in ones in your computer:

<ul>
<li>Video and audio quality are very important for a successful remote communication. Especially audio when you have many non-native speakers in the team. But also video, since non-verbal cues are a key part of human communication.</li>
</ul>
</li>
<li>Enough screen real estate:

<ul>
<li>To me, screen real estate is never too much.</li>
<li>Personally, I have two 28” monitors that I use constantly (e.g. one with the chatting tool and another one with a browser; or one with a browser and another one with the IDE). I use big font sizes, as my sight is not my greatest strength. So having two large screens really helps me.

<ul>
<li>Also, I find my 2 big screens very useful for remote meetings. I can keep the general participants' view in one of my 28” screens (letting me see all, or most, faces); while also keeping another screen either for whoever is speaking at a certain point or, especially, for the shared screen of whoever is presenting.</li>
</ul>
</li>
<li>Additionally, I also keep my 16” mac screen on a side, for secondary things such as music (Spotify), for instance.

<ul>
<li>In meetings, I also benefit from having this third monitor, to keep our chatting tool (Slack) handy there; or a browser window, useful if I have to search for something while in the meeting.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>But, even though this minimal setup is important, some people focus too much (or solely) on tools, and often forget the essential (and more complex) process changes. These are really the key to make the most out of distributed, asynchronous team collaboration.</p>

<h3>So, what are the best practices to work effectively as a fully distributed, asynchronous team?</h3>

<p>Beyond the minimal setup described above, some of the key practices to really be effective as a fully distributed and asynchronous team include:</p>

<ul>
<li>Minimizing sync times, and planning meetings ahead. Letting people have time to organize. Also, being mindful of the best overlapping hours of the attendees (as they are likely to be distributed across multiple timezones).</li>
<li>Recording meetings by default, as they are a great source of documentation later on.</li>
<li>Moving to written and async communication by default:

<ul>
<li>Written communication forces us to think more about the ideas that we want to convey; and also to be more careful expressing them, since our words are going to remain there, readable for a long time, and often visible to many.</li>
<li>By using channels and threads properly, in our chatting tool, we can avoid unnecessary noise, while also creating a great searchable knowledge-base for all coworkers, automatically.</li>
</ul>
</li>
<li>Using digital-native tools to cover all aspects of work.

<ul>
<li>E.g. in Software Development:

<ul>
<li>Github, or an equivalent advanced application built on top of SCM tools:

<ul>
<li>These are also tightly linked to written communication; e.g. in the form of PRs and their reviews, where a lot of async collaboration happens organically.</li>
</ul>
</li>
<li>Jira + Confluence; Notion, or similar:

<ul>
<li>For a more formal organization of work, planning and documentation.</li>
</ul>
</li>
<li>Slack / Microsoft Teams / Email:

<ul>
<li>For direct, mostly async, communication; per teams, topics or 1:1s.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>What is the minimum number of synchronous meetings needed?</h3>

<p>Assuming you are an individual contributor (IC), a minimal set of synchronous meetings could be defined by:</p>

<ul>
<li>A planning session of 1-2 hours held once every 2 weeks (or whatever the duration of cycles that best suits your team is).</li>
<li>A 1-2 hours check-in meeting in the middle of every cycle.</li>
<li>A 1-2 hours review + retrospective session at the end of the cycle, one or two days before the new planning session.

<ul>
<li>Honest retrospectives are extremely valuable; especially if all team members feel free to speak their minds, and all are trying to collectively improve processes and align, constructively.</li>
</ul>
</li>
</ul>


<p>The previous list is really what I consider to be the minimal set of sync meetings necessary, but some useful additions could be made, such as:</p>

<ul>
<li>A 1-2 hours meeting, at some point during the cycle, used as a longer-term planning session, in which to refine upcoming work; to keep a “ready” backlog and thus ease upcoming cycle-planning sessions.</li>
<li>1:1s with your manager, every other week or once a month, for 30 mins. And maybe similar meetigns with some other key team members as well.</li>
<li>Some less frequent meetings such as:

<ul>
<li>Quarterly planning meetings.</li>
<li>Yearly planning meetings.</li>
<li>Some especial, focused meetings, that might be required when starting a new initiative / project.</li>
</ul>
</li>
</ul>


<p>Also, I am a big fan of open, transparent companies; and I’ve been lucky to work at both <a href="https://www.cloudbees.com/">CloudBees</a> and <a href="https://turo.com/">Turo</a> recently, which fit that category. In these cases, so-called “all-hands” meetings are held every other week (or every month), typically lasting less than 1 hour every time. And I find them extremely valuable, to align the whole org (e.g. engineering) and/or the whole company. But in these meetings, which are usually recorded, the average IC is most likely going to be a listener. So they don’t really qualify as a “sync meeting”; even though attending these sessions live has many benefits, including being able to participate (either commenting or asking questions).</p>

<p>So, summarizing: If we take a quick look at the list above, necessary sync time translates to a range that goes from 3 to 10 hours per week.</p>

<p>Assuming the regular 40-hour work week, that means that only between 7.5% to 25% of the time has to be synchronous; while 75% to 92.5% of our work time can be fully asynchronous.</p>

<h2>What about the social or human side of work?</h2>

<p>This is a key aspect to take into account. Working remotely and asynchronously doesn’t mean we become robots. Making the workplace more “human” and developing some social ties with coworkers doesn’t require being in an office setting; and it doesn’t even require working synchronously.</p>

<p>Having said that, spending some synchronous time in social events is definitely good, maybe just a couple of hours a month. And even seeing each other in real life one or two times per year is definitely very positive.</p>

<p>Let’s try to summarize my take on the social side of remote and async work.</p>

<h3>Include some remote-friendly social activities</h3>

<p>Some that I’ve been part of and consider valuable include:</p>

<ul>
<li>Social synchronous meetings, maybe 1-3 hours per month:

<ul>
<li>They should definitely be optional for team members, but I highly encourage everyone to participate.</li>
<li>You might also consider recording them, so that those that were not able to attend can watch the recording and feel integrated, keeping the social context of the team.</li>
<li>In our case, we currently have 2 remote-but-synchronous social activities per month (both optional):

<ul>
<li>One casual social meeting. In this one-hour meeting we can talk about anything other than work. We often bring 2 topics beforehand, as placeholders, but discussion can move away from those topics entirely. We have also had meetings in which we have formed teams to play online light games, such as <a href="https://www.geoguessr.com/">GeoGuessr</a>.</li>
<li>A two-hour <a href="https://codingdojo.org/">Coding Dojo</a> session, where a team member proposes and facilitates a code kata (or architectural kata) and we work together on solving it. We might break the group down into multiple ones depending on the number of attendees. At the end we share learnings, comments, suggestions, etc. This is applicable to us as an engineering team, but I’m sure other teams can find equivalent types of activities.</li>
</ul>
</li>
</ul>
</li>
<li>Social channels in your chatting tool about common interests:

<ul>
<li>E.g.: board-games, cooking, travel, series, you name it…</li>
</ul>
</li>
<li>Have regular, short 1:1s with your different teammates; just to chat a bit and discuss things other than work, to keep a human connection. Even spending half an hour per month on an individual call with each of your closer teammates can already make a big (although subtle) difference in the daily work.

<ul>
<li>In a remote setting, most of the casual conversations that often happen in an office are lost, so forcing them a bit via 1:1s helps compensate for the loss, and lets us build human relationships with our colleagues.</li>
</ul>
</li>
</ul>


<h3>Spending some in-person time periodically is a good idea</h3>

<p>In my last two companies I’ve been working fully remote, and in both cases we have usually had at least 2 opportunities per year to meet face-to-face. In my experience, those events tend to be very energizing, and make me feel much more connected to both my peers and the business. I always come back home highly motivated.</p>

<p>So, meeting for a week or two, every six months or so, even though it is not really essential, I would say is highly recommended. Or at least once a year, to keep the human connection with colleagues. These in-person events can range from simply spending some time working next to each other, to having a company-wide event with talks from different areas. The latter has the additional benefit of breaking silos, letting us learn more about other teams and meet people we don’t often work with. Plus, spending some company-wide, in-person social time, is a great way to devirtualize (and humanize) people with whom we may have chatted (or even met in a virtual call), but who we have never seen in real life.</p>

<h2>The benefits of distributed and async work</h2>

<p>Ok, so far we have covered the needs remote teams have. We have also discussed the minimal time needed in synchronous calls. And we have gone through some tips on how to promote a healthy remote and async work environment.</p>

<p>But, why would we want to do all this? Are there any real benefits to it?</p>

<h3>A productivity booster</h3>

<p>Interruptions are a real productivity killer. I’ve suffered this in the past, working from an office setting. There is often the classic coworker that comes to your desk to ask a not-that-important question, every now and then; interrupting your flow (which maybe took an hour to get going), and now causing you to put extra effort, for the next 20 minutes, trying hard to get back to where you were.</p>

<p>And since there are many of such interruptions during a work day, several hours per day are wasted daily in offices, on average, due to interruptions. With the cost it has both directly (wasted time) and indirectly (negative effect on morale and, as with any other distraction, increased mistakes).</p>

<p>In contrast, by switching those questions to whatever chatting tool you use remotely, they become asynchronous, so you can keep your focus and then reply whenever you finish what you were doing (or whenever you voluntarily decide to switch focus).</p>

<p>If you want to learn more about the cost of interruptions, you can <a href="https://www.nexalearning.com/blog/bid/50317/6-startling-statistics-about-interruptions-at-work">read some articles</a> on it, including <a href="https://www.ics.uci.edu/~gmark/chi08-mark.pdf">scientific research</a>. Interruptions are definitely a big deal.</p>

<p>Another productivity-related benefit of remote and async work is that it forces us to schedule meetings beforehand. This typically leads to time optimization, preparing an agenda and agreeing on the need for the meeting to be held; avoiding unnecessary meetings and spending the minimal time required in the call, with the minimal number of people necessary.</p>

<p>Also, when meetings are recorded, people can decide to skip them if they don’t feel their presence is needed; and can always watch the recording if they feel something relevant was discussed. Recording also allows viewers to skip sections of the meetings that are not relevant to them, or play them at a faster speed, while maybe doing something else (especially when the meeting is not critically important and they only want to have an idea of what was discussed). This also leads to saving time, and being more efficient at work.</p>

<h3>Access to a wider talent pool</h3>

<p>This one is rather obvious. If you are hiring people that will need to go to your office every day, you are limited to people that live in your area and are willing to commute to the office daily (or most days). And / or to some people that might be willing to relocate.</p>

<p>When you switch to remote work, though, you expand significantly. At least to people that work in similar time zones but are far enough to not be able to commute, or people that, for different reasons, have issues getting to the office (not having a car, avoiding traffic jams, etc.). However, if you require synchronous presence of team members despite being remote, you are still imposing a big restriction on your candidates pool.</p>

<p>But when you go one step further, from remote to async work, then you can expand anywhere, despite having almost-incompatible timezones (provided the minimal sync time can be arranged). This switch lets you access the global talent pool almost without restrictions.</p>

<h3>Real flexibility to separate or blend life and work</h3>

<p>As a parent, I really value the flexibility that remote and async work brings to me. I can arrange my work day so that I can take my kids to school / day care, and/or pick them up; working in between. I can also have a quick walk with them in the afternoon while there is still sun; and then I can work a bit when they are asleep and it is quiet at home.</p>

<p>Your preferences might vary, and you might prefer to have a clear separation between your work and personal time. But the key here is that remote and async work lets you decide how you organize your professional self in the way that best fits your life.</p>

<h2>Some interesting resources</h2>

<p>Of course I’m not the first person to write about this, by any means. I’m simply sharing my experiences and views on this, to me, important topic.</p>

<p>Having said that, you might find other experiences and views useful. So I’m adding below some related articles, from relevant voices:</p>

<ul>
<li><a href="https://buffer.com/resources/asynchronous-communication/">Asynchronous Communication and Why It Matters For Remote Work, from Buffer</a></li>
<li><a href="https://about.gitlab.com/company/culture/all-remote/asynchronous/">How to embrace asynchronous communication for remote work, by GitLab</a></li>
<li><a href="https://lattice.com/library/what-is-asynchronous-work-heres-everything-you-need-to-know-to-implement-it-at-your-organization">What Is Asynchronous Work? Here’s Everything You Need to Know to Implement It at Your Organization, from Lattice</a></li>
<li><a href="https://twitter.com/shl/status/1222545212477599751">A Twitter thread by Sahil Lavingia, on Gumroad’s transition to fully asynchronous work</a></li>
<li><a href="https://remote.com/blog/why-you-should-be-doing-async-work">One article on “Why you should be working asynchronously in 2022”, from remote.com</a></li>
</ul>


<h2>Convinced?</h2>

<p>Did I manage to convince you? Or not at all?
Or were you already convinced?</p>

<p>What has your experience been with remote and async work so far?</p>

<p>I’ve probably missed some relevant points; and you might have encountered challenges that I’ve failed to mention (and which might be interesting to discuss). You may also have discovered better socializing approaches in these remote and async settings, or you might know about other tools/tips/processes that ease the transition for more traditional companies.</p>

<p>So, please, join the conversation in the comments and let’s keep discussing this interesting topic, remotely and asynchronously!</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2023, Jan 02</em>: Some general style improvements.</p>
  <p><em>2022, Dec 31</em>: First version published.</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Genetic Algorithms Figuring out Startup Life Choices]]></title>
    <link href="https://www.romenrg.com/blog/2021/07/17/genetic-algorithms-figuring-out-startup-life-choices/"/>
    <updated>2021-07-17T10:00:00+01:00</updated>
    <id>https://www.romenrg.com/blog/2021/07/17/genetic-algorithms-figuring-out-startup-life-choices</id>
    <content type="html"><![CDATA[<p>In late 2015, based on all the <a href="/blog/2015/03/17/10-plus-1-valuable-lessons-i-learned-from-my-failed-startup/">lessons learned from my startup experience</a>, I decided to create a representation of the <a href="https://geneticstartups.com/info/map#cell-types">different choices startups encounter</a> through their lives, as a map; and then assigned some values and scores to them, so that Genetic Algorithms could be used as a way to learn to navigate those choices.</p>

<p>Originally this was implemented as a dektop application, but I have recently built a web application to let users experiment with <a href="https://www.geneticstartups.com">Genetic Startups</a>. Here is a quick demo video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/fbtgCnUwW68" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>




<!-- More -->


<h2>Telling a story based on the algorithm result</h2>

<p>Apart from creating random maps with the different choices, modifying the settings and running the algorithm; there is also a feature to tell a story, based on the final path selected by our algorithm; as if it was the real story of a startup. This feature is showcased in the following video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/k8YICnLAB_g" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<h2>More information</h2>

<p>If you want to learn more about how the algorithm is implemented or about the tech stack behind this web application, you can take a look at the following video, or visit the <a href="http://www.geneticstartups.com/info">info section of Genetic Startups</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/DMIWYCU6SIU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<h2>Want to contribute?</h2>

<p>Genetic Startups is open source software. It is also a work in progress and a hobby project, so many improvements can be made. Constructive contributions are welcome. Please feel free to comment in this post, or refer to the main <a href="https://github.com/romenrg/genetic-startups">GitHub repository</a> of the project for more information on how to contribute. I look forward to hearing your thoughts!</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2021, Jul 17</em>: First version published.</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Projects vs Software Products]]></title>
    <link href="https://www.romenrg.com/blog/2020/12/30/software-projects-vs-software-products/"/>
    <updated>2020-12-30T13:26:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2020/12/30/software-projects-vs-software-products</id>
    <content type="html"><![CDATA[<p>As a developer, you work on software projects, right? ...Or are they <em>software products</em>?</p>

<p>Like many others in the software industry, you might think those two concepts are synonyms; but they aren’t. In fact, whether the software being developed is considered a project or a product may have critical and non-trivial ramifications, in many aspects.</p>

<p><img src="https://www.romenrg.com/images/products_vs_projects.jpg" alt="Team meeting in which multiple colleagues discuss in a table, where several computres are opened. One man moves hands displaying confusion" /></p>

<p>The <em>not-so-subtle</em> differences between software projects and software products actually have a huge impact on our behavior, both from a business as well as from an engineering perspective.</p>

<!-- More -->


<p>For many years I’ve been trying to find the time to write about this key difference, to which many people in tech fail to give importance to. About a year ago, I had the opportunity to give a <a href="https://www2.slideshare.net/romenrg/agile-software-development-beyond-projects-ull">lecture</a> on this very topic. And now, I have finally decided to write about this important topic in more detail.</p>

<p>I'll start with definitions, digging into the key differences that derive from them. Afterwards, I'll explore the critical behavioral ramifications. However, if you just want a quick summary, feel free to jump directly to the <a href="#detailed-comparison">comparison table</a>.</p>

<h2>Let’s start with some definitions</h2>

<p>If we want to get a clear definition of "project" and “<a href="https://www.pmi.org/about/learn-about-pmi/what-is-project-management">project management</a>", the Project Management Institute (PMI) can probably be of some help. From their site we can extract two clear sentences that are relevant in this context:</p>

<ul>
<li>A <strong>project</strong> is temporary in that it has a defined beginning and end in time, and therefore defined scope and resources.</li>
<li><strong>Project management</strong>, then, is the application of knowledge, skills, tools, and techniques to project activities to meet the project requirements.</li>
</ul>


<p>Now, if we try to look for definitions of “<a href="https://en.wikipedia.org/wiki/Product_(business)">product</a>” and “<a href="https://en.wikipedia.org/wiki/Product_management">product management</a>”, we can probably summarize them as:</p>

<ul>
<li>A <strong>product</strong> is an object or system made available for consumer use; it is anything that can be offered to a market to satisfy the desire or need of a customer.</li>
<li><strong>Product management</strong>, then, drives the business case for product development and has an active role throughout its development, test and launch; being also involved in product change and lifecycle decisions and planning.</li>
</ul>


<p>Can you tell the key differences already?</p>

<h2>Digging into the differences</h2>

<h3>Two key differences, from definitions</h3>

<p>From the definitions above, we can clearly see the first big difference: the temporary nature of a project. <strong>Projects are time-constrained efforts</strong>, supposed to have a defined beginning and end date. This clearly-defined temporary nature does not apply to products, which don’t have such predefined beginning and end in time, being subject to market demand instead.</p>

<p>Moreover, those clearly defined time boundaries for projects also bring the second clear distinction: fixed scope and resources (i.e. the project requirements). This doesn’t apply to products either. <strong>Products are evolving creatures by nature</strong>. While project management cares about meeting those predefined project requirements; product management cares about the business case for the product, constantly learning from users and having an active role in the product lifecycle, defining new features and/or re-prioritizing work, adapting to market needs.</p>

<h3><a id="detailed-comparison"></a>Detailed comparison</h3>

<p>When I was preparing my lecture, I found a very nice article by Sriram Narayan in Martin Fowler’s blog. In his article, Sriram added a very comprehensive <a href="https://martinfowler.com/articles/products-over-projects.html#WhatIsProduct-mode">table comparing project-mode and product-mode</a>.</p>

<p>For this article, I have created my own simplified table; focusing only on some key aspects I would like to compare for the two cases.</p>

<table>
<thead>
<tr>
<th>Aspect                                  </th>
<th> Project                                   </th>
<th> Product                                                    </th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Duration</em>                              </td>
<td> Fixed. Limited (e.g. <em>X</em> months).           </td>
<td> Unknown. Depending on market (from <em>X</em> weeks to <em>Y</em> decades).</td>
</tr>
<tr>
<td><em>Scope</em>                                 </td>
<td> Supposedly known and fixed.               </td>
<td> Unknown. Constant learning and adaptation is assumed.</td>
</tr>
<tr>
<td><em>Costs</em>                                 </td>
<td> Supposedly known and fixed.               </td>
<td> “Pay as we go”, i.e. weekly / monthly / yearly (e.g. salaries).</td>
</tr>
<tr>
<td><em>Technical quality</em>                     </td>
<td> Not rewarded; thus, not prioritized. Projects are seen as one-off efforts, so maintainability is not valued. </td>
<td> Critical. Product development is a continuum. Technical excellence is key to keep up the product’s iterative and incremental evolution.</td>
</tr>
<tr>
<td><em>Key mindset aspects</em>                   </td>
<td> Fixed mindset. “We know what we have to build”. So, “just do it”. Don’t question things. </td>
<td> Learning mindset. “We are constantly learning and adapting”. Data-driven. Question decisions constantly.</td>
</tr>
<tr>
<td><em>Key engineering skills</em>                </td>
<td> Framework-specific knowledge. <br/><br/> Everything is fixed, from features to technologies. "We just need to write the code as quickly as possible". </td>
<td> <a href="https://github.com/romenrg/evergreen-skills-developers">Evergreen development skills</a>. <br/><br/> Everything may change, from features to technology. "We need to learn and adapt constantly". "We apply technical best practices". "Teamwork, mentoring and collaboration are key".</td>
</tr>
</tbody>
</table>


<h2>Software development is mainly about building products</h2>

<p><a href="https://www.romenrg.com/blog/2015/09/28/why-asking-developers-for-time-estimates-in-software-projects-is-a-terrible-idea-and-how-to-bypass-it-with-scrum/#the-role-of-evil-contracts">Software development involves many unknowns</a>. Those unknowns make it extremely hard for us to have the certainties "projects" require upfront. At the beginning is when we know the least about the software what we are building.</p>

<h3>In the digital economy, software evolves constantly</h3>

<p>Think of the software you use in your daily life. Isn't it always evolving? You receive constant updates, not only for bugfixing; but also to add new features, <a href="https://www.romenrg.com/blog/2013/01/02/improving-the-ui-to-achieve-a-better-ux-my-experience-in-stat4you/">improve the UX</a>, or even to remove pieces that are no longer relevant.</p>

<p>Does this fit into the definition of "project" we saw before? Do these applications have “a defined beginning and end in time”? And how about scope and resources, do they seem to have been fixed upfront?</p>

<p>Change and evolution are natural in products, but not in projects. Projects don't welcome change. And software evolves constantly.</p>

<h3>Software products and outsourcing are not a good fit</h3>

<p>Traditionally, it has been common for non-software organizations to outsource software development initiatives. For instance, Government agencies typically outsource their “software development projects”, even though in most cases they should have been thinking in terms of software products instead.</p>

<p>Think of an e-gov application in which citizens can perform their bureaucratic obligations from home. Isn’t that a software product? It will have to evolve, as new laws are passed. And it is not supposed to have a predefined teardown day. Instead, we would probably expect it to be there for the long run. Over time, citizens (users) will discover bugs, which will have to be addressed; and we will likely complain about it and/or suggest improvements. There might also be scalability issues and/or outages that will have to be tackled.</p>

<p>Treating these software products as outsourced projects means that the owners will hire an external company to build it. Usually the cheapest. The project will have a fixed scope, and the parties will agree on a timeline and on a price. The external company will complete the project, according to those parameters and hand it over to the customer. Then, usually, the external company forgets about it. If changes are desired in the future, new projects will be defined and outsourced. Often to different companies.</p>

<p>In most cases, the company that is hired to build the software is not involved in the discovery process with potential users. They are not involved in the prioritization of features. They are just hired to do X, as quickly and cheaply as possible. And since they are not rewarded for software quality nor for asking questions, they will probably build it without maintenance in their minds. And they won’t question decisions nor worry about gathering data.</p>

<p>Now, think how different it would be if it was treated as a software product, with an in-house team building it and participating in all the process, from conception to evolution. The team would understand needs, motivations and strategic goals; they would be engaged. They would ask questions. Hypotheses could be defined together and data collection and learning would be in everybody’s mind since the beginning. Working in small increments would be easier. Writing maintainable code becomes crucial. Changes are welcome. And quality matters.</p>

<p>Being aware of the importance of software products in the digital economy means that, if your software is (or is becoming) the core of your business, then you keep software development in-house. Nowadays, every company is a software company. Think of Airbnb, Lyft or Netflix. These businesses could have opted to externalize software development, but they realized the software products they were building are the core of their business. They realized they were software companies.</p>

<h3>How about open source "projects"?</h3>

<p>It is common in the software industry to hear people refer to “open source projects”. In most cases, though, I would argue we should be talking about “open source products” instead.</p>

<p>I have been an open source software (OSS) user for many years, and I have also contributed to open source myself. One example of OSS to which I have contributed is <a href="http://jenkins.io/">Jenkins</a>. Jenkins is the leading open source automation server. It has been around for more than 15 years, with millions of installations worldwide. And it has evolved significantly, including the rename from Hudson, the recent UI changes, and the thousands of ever-evolving plugins, created by a thriving open source community. Based on this data and the previous definitions, should we consider Jenkins an “open source project” or, rather, an “open source product”?</p>

<p>I understand that, when somebody (like Kohsuke with Jenkins) starts to build an open source software, they might have a limited and well defined idea. And they may work on a “project” to make it happen. A project to build the first set of fixed features for their idea. But then, if it is successful, that initial project leads to a product that keeps evolving in unanticipated ways. Scope is no longer fixed, as the community starts to bring new ideas and prioritize their development; and there is no defined “end date”.</p>

<p>Successful open source "projects" are here to stay, for a long time. But their success will keep them evolving within their communities, as <em>software products</em>.</p>

<h2>My personal take</h2>

<p>As you may have guessed after reading this article, I’m a big fan of building software as products. I have built many in my career; and <a href="https://www.romenrg.com/blog/2015/03/17/10-plus-1-valuable-lessons-i-learned-from-my-failed-startup/">I’ve learned a lot</a> from those experiences.</p>

<p>But building software as products is not just what I enjoy the most. It is truly the way I believe we should be building software, to get the most out of it.</p>

<p>Software projects are dead. Long live <em>software products</em>.</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2021, Jan 10</em>: Improved introduction, incl. reference to comparison table, as a TL;DR resource.</p>
  <p><em>2020, Dec 30</em>: First version published.</p>
 </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Programmer Bill Of Rights, Revisited]]></title>
    <link href="https://www.romenrg.com/blog/2016/11/15/the-programmer-bill-of-rights/"/>
    <updated>2016-11-15T18:34:00+00:00</updated>
    <id>https://www.romenrg.com/blog/2016/11/15/the-programmer-bill-of-rights</id>
    <content type="html"><![CDATA[<p>10 years ago, <a href="https://en.wikipedia.org/wiki/Jeff_Atwood">Jeff Atwood</a> wrote an article he titled <a href="https://blog.codinghorror.com/the-programmers-bill-of-rights/">The Programmer Bill of Rights</a>. In that article he described 6 fundamentals that companies should provide for programmers to be successful and work to their full potential, thus maximizing their productivity.</p>

<p><img src="https://www.romenrg.com/images/two_monitors_unsplash.jpg" alt="Picture of a programmers desk with two monitors, one of them showing code" /></p>

<p>Sadly, ten years later, many companies still deny these basics to their developers, even though the business case for these six points is absolutely proved.</p>

<p>In this article, not only would I like to update the original 6 principles, providing further evidence of their importance; but also I would like to extend the list. Based on my experience during the last 10 years, I will propose 4 new fundamentals that I consider absolutelly necessary for the daily work of any programmer, developer or software engineer. Let's get started:</p>

<!-- More -->


<h2>10 Fundamental Programmer Rights (6 + 4)</h2>

<p>It is worth mentioning that, despite the headline, <em>this article does not refer to general Labor Rights, since those are usually well-known and its compliance is required by law. This article focuses only on aspects that are specific to software development</em>, aspects that are usually not regulated, but have a huge impact on programmers' daily work.</p>

<h3>The 6 Original Rights proposed by Jeff</h3>

<ol>
<li><p><strong>Every programmer shall have two decent monitors</strong>. <br/>
Apart from the scientific studies Jeff linked in his article in 2006, <a href="http://techreport.com/news/14343/more-bigger-monitors-boost-productivity-says-study">many others have emerged more recently</a>, proving the productivity benefits of having two monitors while programming. <a href="http://www.computerweekly.com/news/2240088457/Multiple-monitors-boost-productivity-by-355">Some studies even suggest having three monitors</a>.
However, I have met some engineers that prefer to choose one big (27”) monitor rather than two smaller ones; and that should definitely be OK if that is her preferred set-up. <em>The key here is that companies should be wise enough to provide developers with the tools they need to take their productivity to the maximum.</em>
Also, developers working on User Interfaces and graphic designers care a lot about other characteristics such as colors or bright; so again, it is not just about the screen size, it is about taking your employee into account when providing the tools he needs to perform his job in the best possible way.
How is it possible that some companies do not pay attention to this at all? As many people pointed out in <a href="http://developers.slashdot.org/story/11/05/16/1957210/do-developers-really-need-a-second-monitor">this slashdot discussion about the topic</a>, the cost of a decent monitor may be around $150 - $200 nowadays. That is a ridiculous amount compared to <a href="http://money.usnews.com/careers/best-jobs/software-developer/salary">the salary of a developer</a>… So it cannot be about the money; since we know that the productivity increase would pay off in just a few days. Sadly, refusals from management to provide the right tools to employees are a clear sign of toxic management or toxic company culture and <a href="#toxic-management-denying-rights">if you find yourself in that situation, you should consider looking for a new job <em>ASAP</em></a>.</p></li>
<li><p><strong>Every programmer shall have a fast PC</strong>. <br/>
Although this claim still makes total sense, I think this one is one of the easiest-to-get for management and non-tech people, since everybody has suffered a slow pc and can relate to it more easily. However, I have seen cases in which developers have to connect to a remote machine using a remote desktop. This may cause some performance issues, as well as other problems such as non-functioning shortcuts or hardware compatibility problems. Unless there is a very clear reason to use a Remote Desktop, it should be avoided. As Jeff stated 10 years ago, every developer should have a fast computer that allows her to do all she needs to get her job done.</p></li>
<li><p><strong>Every programmer shall have their choice of mouse and keyboard</strong>. <br/>
To be honest, I’m not especially picky with mouse and keyboard, but some developers are… So if you are a manager and one of your developers complains about his keyboard and mouse… Do not waste any time thinking, we are probably talking about less than $50 here. It’s not worth discussing. If his choices are very specific or expensive, at least allow him to bring his own keyboard and mouse from home. Diversity in a company is enriching, so don’t try to treat all your employees as if they were clones.</p></li>
<li><p><strong>Every programmer shall have a comfortable chair</strong>. <br/>
I hope this is obvious to everybody in 2016. <a href="http://ergo.human.cornell.edu/AHTutorials/chairch.html">Having an ergonomic chair and sitting correctly is a health issue</a>. In fact, many countries have already created <a href="http://www.hse.gov.uk/pubns/priced/hsg57.pdf">health-and-safety regulations for office chairs</a>. Moreover, money is not a big deal either now, since <a href="http://www.ikea.com/us/en/catalog/products/00103102/">there are good chairs for $200</a>. Also, it is worth mentioning that in recent years the <a href="http://ergonomics.about.com/od/office/a/Benefits-of-a-Standing-Desk.htm">benefits of standing desks</a> have become popular, so it could be something to consider. Once again, when it comes to the tools to be used on a daily basis at work, like chairs, the best approach would be to involve employees in the decision. We all may have different preferences, based on our height, weight, back problems, etc…</p></li>
<li><p><strong>Every programmer shall have a fast internet connection</strong>. <br/>
For this claim, the same as in the “fast PC” sections has happened. Apart from the widespread access to broadband internet at low prices; services like Youtube, Netflix, online games and Skype/Hangouts video-calls have made us a great favour. Thanks to them many non-technical managers have realised about the importance of a fast internet connection, making it a default in most companies.</p></li>
<li><p><strong>Every programmer shall have quiet working conditions</strong>. <br/>
This is a tricky one. Nowadays most offices are open-plan. Moreover, collaboration is encouraged in agile teams. All this makes it difficult to keep quiet working conditions for us to concentrate. Many <a href="https://twitter.com/jasonfried/status/794212152206729216">relevant people in the industry are raising concerns about this</a>. However, <a href="https://hbr.org/2015/03/stop-noise-from-ruining-your-open-office">there are some things we can do</a>, such as having (and using) meeting rooms, having white noise generators to mask voices, wearing headphones to concentrate (which I usually do) and/or use an indicator to show coworkers if you can or cannot be interrupted. Even though many jobs require concentration, getting to “flow state” is vital to accomplish most programming tasks, as Jeff mentions.</p></li>
</ol>


<h3>My 4 Proposed Additions</h3>

<ol>
<li><p><strong>Every programmer shall be free to choose her preferred IDE</strong>. <br/>
In the past it was common to have the build and/or deploy process of the application being developed attached to the IDE (usually by means of a plugin). Fortunately, nowadays the use of build tools has become mainstream, making our build processes IDE-independent. For example, in the Java community, build tools like maven or gradle make it possible for developers in a team to use different IDEs such as Eclipse, Intellij IDEA or any other editors, without any problems of collaboration. They just need to use a version control system (such as Subversion or Git) to share changes and a build tool to generate artifacts. In such environment, forcing developers to use an standardized IDE seems to be only a poor resource of old-school managers used to the “command-and-control” approach to impose their rule. That imposition can only cause a low morale among team members, decrease motivation and cause brain drain in the team, since many talented developers will leave to a more open-minded company.</p></li>
<li><p><strong>Every programmer shall have admin rights on his computer</strong>. <br/>
Last year I was introduced to a company that had recently been created with the idea to enter in the software development market. However, I was utterly surprised when I got to know that this company didn’t allow developers to have admin rights in their computers. This is pure nonsense. <a href="https://stackoverflow.com/a/701361">As this fantastic answer in Stack Overflow states</a>, developers in their daily work need to install software for different development purposes (editors, servers, databases, API clients...), they need to change different system configurations for different purposes and, most importantly, they need to be comfortable at work in order to give the best of themselves. Restricting admin rights to developers will only lead to a high turnover rate, inability to retain competent people, poor morale and poor quality delivery. Probably, <a href="http://stackoverflow.com/questions/701214/should-developers-have-administrator-permissions-on-their-pc#comment526142_701214">as this other comment states</a>, "if you walk into a job as a developer and find you have no admin rights in your machine, the best choice is to not come back the next day".</p></li>
<li><p><strong>Every programmer shall have access to the big picture</strong>. <br/>
Sometimes programmers are not presented with the big picture of the system they are contributing to build, but instead they are given small tasks to do, with narrow descriptions. In those cases, they often do not have direct access to the product owner nor the end users of the software they are working on. This usually causes trouble, since many wrong decisions can be made and many misconceptions can be created. To design software that can evolve properly in the desired direction, developers should understand the big picture, the whole system that is being built, not only the small task that has been assigned to them at one point. Moreover, developers should be free to ask as many functional questions as they need, so they can make the right design decisions and write software that can evolve as expected, avoiding later problems.</p></li>
<li><p><strong>Every programmer shall have autonomy in his daily work</strong>. <br/>
As any other creative process, programming requires autonomy. That is why agile frameworks, like <a href="https://en.wikipedia.org/wiki/Scrum_(software_development)">Scrum</a>, propose planning work for periods of a week, 15 days or a month; so developers can organize themselves in between. Daily meetings can help detect and resolve problems, as well as keep the development team in sync; but freedom for each contributor to organize his workday without suffering micromanagement should be preserved. The need for autonomy also applies to the programming process, where creativity is key to problem-solving. Some developers prefer to solve a task by creating some tests first, others build a monolithic function and then refactor it, others start by understanding the existing codebase and doing some diagrams... Any of these approaches should be respected, as long as basic agreements of the team (e.g. <em>"definition of done"</em>) and quality standards (e.g. <em>minimum test coverage</em>) are met.</p></li>
</ol>


<p><em>What do you think about these additions? Please, join the conversation!</em> <br/> <em>Are these rights being respected at your company?</em></p>

<blockquote><h3><a name="toxic-management-denying-rights">A real case of toxic management denying many of these rights</a></h3>

<p>Unfortunately, there are companies that keep denying many of these basics today.</p>

<p>I recently saw a case in which a manager refused to replace a defective monitor with obvious flickering problems to an employee (even though flickering may cause dizziness, fatigue and headaches). This very manager was also forcing programmers to work with only one squared 19” monitor (for no reason). He firmly refused to buy second monitors and even forbade some developers to bring a second monitor from their homes… Does it make any sense? However, this guy had two wide monitors in his desk, of course. I guess he just wanted to show that there was a big difference between him and his “subordinates”, who had to be controlled and treated like clones.</p>

<p>As with any other of these rights, a reluctance to provide programmers with two monitors not only shows that your manager or the company board do not care about your opinions or comfort; they don’t even care about productivity. It is definitely a red flag. Taking into account the ridiculously small cost of monitors nowadays, even worrying about it shows a clear case of being “penny wise, pound foolish”.</p>

<p>But that’s not all of it. Usually, when an old-school command-and-control minded manager is violating one of these basics, is probably violating many others, since they are all tightly-linked and it is all about mindset and company culture.</p>

<p>In this particular case, this very manager was also forcing developers to use a three-year-outdated version of Netbeans as IDE, with no front-end support (significantly diminishing their productivity). And, by the way, he had also decided to forbid admin rights to programmers in their own machines (making their daily work absurdly complicated)... So you see, three basics at once. Not to mention that micro-management was also one of the company core values. The micro-manager used to interrupt programmers every hour to closely control their tasks, taking away all the autonomy and long-term vision from the developer.</p>

<p>If you find yourself in a case like this one, my advice cannot be clearer: there are many companies that will be glad to provide the tools you need to achieve the best results in your daily work, so don’t wait anymore, move on. No one should work for a tyrant like that.</p></blockquote>

<p>As an ending to this article, I would like to borrow the last paragraph from Jeff’s article: “The few basic rights we're asking for are easy. They aren't extravagant demands. They're fundamental to the quality of work life for a software developer. If the company you work for isn't getting it right, making it right is neither expensive nor difficult. <strong>Demand your rights as a programmer!</strong> And remember: you can either change your company, or you can <em>change your company</em>”.</p>

<div class="revisions">
  <h2>Significant revisions</h2>
  <p><em>2018, Apr 27</em>: Clarified the last two 'rights', improving grammar and style. Minor corrections in the example section were also included.</p>
  <p><em>2016, Nov 15</em>: Original version published.</p>
</div>

]]></content>
  </entry>
  
</feed>
